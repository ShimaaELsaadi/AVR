
FinalVersionAVRDrivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c6  00800060  00002c8c  00002d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800126  00800126  00002de6  2**0
                  ALLOC
  3 .stab         000033d8  00000000  00000000  00002de8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000205d  00000000  00000000  000061c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_10>
      2c:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__vector_11>
      30:	0c 94 16 08 	jmp	0x102c	; 0x102c <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 32       	cpi	r26, 0x26	; 38
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e2       	ldi	r26, 0x26	; 38
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 33       	cpi	r26, 0x33	; 51
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <main>
      8a:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e8       	ldi	r22, 0x82	; 130
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 39 16 	jmp	0x2c72	; 0x2c72 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TIM0_init>:
volatile u16 counter = 0;

static void (*(TIM0_OVF_Callback))(void) = NULL;
static void (*(TIM0_COM_Callback))(void) = NULL;

void TIM0_init(){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/*Select MODE OF TIMER */
#if TIM0_Mode==TIM0_Normal_Mode
	CLR_BIT(TCCR0,WGM00);
	CLR_BIT(TCCR0,WGM01);
#elif TIM0_Mode==TIM0_CTC
CLR_BIT(TCCR0,WGM00);
     ca6:	a3 e5       	ldi	r26, 0x53	; 83
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e3 e5       	ldi	r30, 0x53	; 83
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 7b       	andi	r24, 0xBF	; 191
     cb2:	8c 93       	st	X, r24
SET_BIT(TCCR0,WGM01);
     cb4:	a3 e5       	ldi	r26, 0x53	; 83
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e3 e5       	ldi	r30, 0x53	; 83
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	88 60       	ori	r24, 0x08	; 8
     cc0:	8c 93       	st	X, r24
OCRO_SET(INIT_OCR0);
     cc2:	8d e7       	ldi	r24, 0x7D	; 125
     cc4:	0e 94 46 07 	call	0xe8c	; 0xe8c <OCRO_SET>
    SET_BIT(TCCR0, WGM00);
	SET_BIT(TCCR0, WGM01);
#endif
	/*select Compare_Output_Mode*/
#if  Compare_Output_Mode==NON_INVERTING
	SET_BIT(TCCR0, COM01);
     cc8:	a3 e5       	ldi	r26, 0x53	; 83
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e3 e5       	ldi	r30, 0x53	; 83
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	80 62       	ori	r24, 0x20	; 32
     cd4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM00);
     cd6:	a3 e5       	ldi	r26, 0x53	; 83
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e3 e5       	ldi	r30, 0x53	; 83
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	8f 7e       	andi	r24, 0xEF	; 239
     ce2:	8c 93       	st	X, r24
#elif(TM0_PRESCALAR==TM0_PRESCALAR8)
CLR_BIT(TCCR0,CS00);
SET_BIT(TCCR0,CS01);
CLR_BIT(TCCR0,CS02);
#elif(TM0_PRESCALAR==TM0_PRESCALAR64)
SET_BIT(TCCR0,CS00);
     ce4:	a3 e5       	ldi	r26, 0x53	; 83
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e3 e5       	ldi	r30, 0x53	; 83
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	81 60       	ori	r24, 0x01	; 1
     cf0:	8c 93       	st	X, r24
SET_BIT(TCCR0,CS01);
     cf2:	a3 e5       	ldi	r26, 0x53	; 83
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e3 e5       	ldi	r30, 0x53	; 83
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	82 60       	ori	r24, 0x02	; 2
     cfe:	8c 93       	st	X, r24
CLR_BIT(TCCR0,CS02);
     d00:	a3 e5       	ldi	r26, 0x53	; 83
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e3 e5       	ldi	r30, 0x53	; 83
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8b 7f       	andi	r24, 0xFB	; 251
     d0c:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS00);
	SET_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
	 /* Clear counter register */
	TCNT0 =0;
     d0e:	e2 e5       	ldi	r30, 0x52	; 82
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	10 82       	st	Z, r1
}
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <TIMO_INTRRUPT_Enable>:


void TIMO_INTRRUPT_Enable(){
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
#if TIM0_Mode==TIM0_Normal_Mode
	SET_BIT(TIMSK,TOIE0);
#elif TIM0_Mode==TIM0_CTC
   SET_BIT(TIMSK,OCIE0);
     d22:	a9 e5       	ldi	r26, 0x59	; 89
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e9 e5       	ldi	r30, 0x59	; 89
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	82 60       	ori	r24, 0x02	; 2
     d2e:	8c 93       	st	X, r24
#endif
	/*Enable global interrupts*/
   GELOPAL_INTERRUPT_ENABLE();
     d30:	0e 94 4c 08 	call	0x1098	; 0x1098 <GELOPAL_INTERRUPT_ENABLE>
}
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <TIM0_CHECK_OVF>:
void TIM0_CHECK_OVF() {
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
	/* Wait for TOV0 to roll over */
	if (TIFR & (1 << TOV0))
     d42:	e8 e5       	ldi	r30, 0x58	; 88
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	88 2f       	mov	r24, r24
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	82 70       	andi	r24, 0x02	; 2
     d4e:	90 70       	andi	r25, 0x00	; 0
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	39 f0       	breq	.+14     	; 0xd62 <TIM0_CHECK_OVF+0x28>
		/* Clear TOV0 flag */
		SET_BIT(TIFR, TOV0);
     d54:	a8 e5       	ldi	r26, 0x58	; 88
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e8 e5       	ldi	r30, 0x58	; 88
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	82 60       	ori	r24, 0x02	; 2
     d60:	8c 93       	st	X, r24
}
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <TIM0_OVF_vCallback>:
//ISR(TIMER0_OVF_vect) {
//	if (TIM0_OVF_Callback != NULL) {
//		TIM0_OVF_Callback();
//	}
//}
void TIM0_OVF_vCallback(void (*p1v_value)(void)) {
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <TIM0_OVF_vCallback+0x6>
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	9a 83       	std	Y+2, r25	; 0x02
     d74:	89 83       	std	Y+1, r24	; 0x01
	if (p1v_value != NULL)
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	31 f0       	breq	.+12     	; 0xd8a <TIM0_OVF_vCallback+0x22>
		TIM0_COM_Callback = p1v_value;
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	9a 81       	ldd	r25, Y+2	; 0x02
     d82:	90 93 2b 01 	sts	0x012B, r25
     d86:	80 93 2a 01 	sts	0x012A, r24
}
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <__vector_11>:
void __vector_11(void)__attribute__((signal));
void __vector_11(void){
     d94:	1f 92       	push	r1
     d96:	0f 92       	push	r0
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	0f 92       	push	r0
     d9c:	11 24       	eor	r1, r1
     d9e:	2f 93       	push	r18
     da0:	3f 93       	push	r19
     da2:	4f 93       	push	r20
     da4:	5f 93       	push	r21
     da6:	6f 93       	push	r22
     da8:	7f 93       	push	r23
     daa:	8f 93       	push	r24
     dac:	9f 93       	push	r25
     dae:	af 93       	push	r26
     db0:	bf 93       	push	r27
     db2:	ef 93       	push	r30
     db4:	ff 93       	push	r31
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
	if(TIM0_OVF_Callback!=NULL){
     dbe:	80 91 28 01 	lds	r24, 0x0128
     dc2:	90 91 29 01 	lds	r25, 0x0129
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	29 f0       	breq	.+10     	; 0xdd4 <__vector_11+0x40>
		TIM0_OVF_Callback();
     dca:	e0 91 28 01 	lds	r30, 0x0128
     dce:	f0 91 29 01 	lds	r31, 0x0129
     dd2:	09 95       	icall
	}
}
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	ff 91       	pop	r31
     dda:	ef 91       	pop	r30
     ddc:	bf 91       	pop	r27
     dde:	af 91       	pop	r26
     de0:	9f 91       	pop	r25
     de2:	8f 91       	pop	r24
     de4:	7f 91       	pop	r23
     de6:	6f 91       	pop	r22
     de8:	5f 91       	pop	r21
     dea:	4f 91       	pop	r20
     dec:	3f 91       	pop	r19
     dee:	2f 91       	pop	r18
     df0:	0f 90       	pop	r0
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	0f 90       	pop	r0
     df6:	1f 90       	pop	r1
     df8:	18 95       	reti

00000dfa <TIMO_set_callback_COM>:

void TIMO_set_callback_COM(void (*p2v_value)(void)) {
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <TIMO_set_callback_COM+0x6>
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	9a 83       	std	Y+2, r25	; 0x02
     e06:	89 83       	std	Y+1, r24	; 0x01
	if (p2v_value != NULL)
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	9a 81       	ldd	r25, Y+2	; 0x02
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	31 f0       	breq	.+12     	; 0xe1c <TIMO_set_callback_COM+0x22>
		TIM0_COM_Callback = p2v_value;
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	90 93 2b 01 	sts	0x012B, r25
     e18:	80 93 2a 01 	sts	0x012A, r24
}
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <__vector_10>:

void __vector_10(void)   __attribute__((signal));
void __vector_10(void){
     e26:	1f 92       	push	r1
     e28:	0f 92       	push	r0
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	0f 92       	push	r0
     e2e:	11 24       	eor	r1, r1
     e30:	2f 93       	push	r18
     e32:	3f 93       	push	r19
     e34:	4f 93       	push	r20
     e36:	5f 93       	push	r21
     e38:	6f 93       	push	r22
     e3a:	7f 93       	push	r23
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	af 93       	push	r26
     e42:	bf 93       	push	r27
     e44:	ef 93       	push	r30
     e46:	ff 93       	push	r31
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
	if(TIM0_COM_Callback!=NULL){
     e50:	80 91 2a 01 	lds	r24, 0x012A
     e54:	90 91 2b 01 	lds	r25, 0x012B
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	29 f0       	breq	.+10     	; 0xe66 <__vector_10+0x40>
	   TIM0_COM_Callback();
     e5c:	e0 91 2a 01 	lds	r30, 0x012A
     e60:	f0 91 2b 01 	lds	r31, 0x012B
     e64:	09 95       	icall
}
}
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	ff 91       	pop	r31
     e6c:	ef 91       	pop	r30
     e6e:	bf 91       	pop	r27
     e70:	af 91       	pop	r26
     e72:	9f 91       	pop	r25
     e74:	8f 91       	pop	r24
     e76:	7f 91       	pop	r23
     e78:	6f 91       	pop	r22
     e7a:	5f 91       	pop	r21
     e7c:	4f 91       	pop	r20
     e7e:	3f 91       	pop	r19
     e80:	2f 91       	pop	r18
     e82:	0f 90       	pop	r0
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	0f 90       	pop	r0
     e88:	1f 90       	pop	r1
     e8a:	18 95       	reti

00000e8c <OCRO_SET>:
//	if (TIM0_OVF_Callback != NULL) {
//		TIM0_OVF_Callback();
//	}
//}*/

void OCRO_SET(u8 OCR0_VALUE) {
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	0f 92       	push	r0
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = OCR0_VALUE;
     e98:	ec e5       	ldi	r30, 0x5C	; 92
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	80 83       	st	Z, r24
}
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <SET_INIT_VALUE>:

void SET_INIT_VALUE(u8 TCNT0_VALUE) {
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	0f 92       	push	r0
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = TCNT0_VALUE;
     eb4:	e2 e5       	ldi	r30, 0x52	; 82
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	80 83       	st	Z, r24
}
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <duty_cycle_set_FastPWM>:

void duty_cycle_set_FastPWM(u8 copy_duty_cycle) {
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	0f 92       	push	r0
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	89 83       	std	Y+1, r24	; 0x01
#elif Fast_state==INVERTING
	u8 complementary_duty = 100 - copy_duty_cycle;
	OCRO_SET((((complementary_duty * 256) / 100)-1));
#endif
	}
}
     ed0:	0f 90       	pop	r0
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <duty_cycle_set_PhaseCorrect>:

void duty_cycle_set_PhaseCorrect(u8 copy_duty_cycle){
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	0f 92       	push	r0
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	89 83       	std	Y+1, r24	; 0x01
#elif Fast_state==INVERTING
		u8 complementary_duty = 100 - copy_duty_cycle;
		OCRO_SET((((complementary_duty * 256) / 100)-1));
	#endif
	}
}
     ee4:	0f 90       	pop	r0
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <SPI_INIT>:
 *      Author: shim
 */
#include "SPI.h"

static void(*SPI_pCallBack)(u8 copy_u8RxData) = NULL;
void SPI_INIT(void){
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
#if SPI_Interrupt==DISABLE
	CLR_BIT(SPCR,SPIE);
     ef4:	ad e2       	ldi	r26, 0x2D	; 45
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	ed e2       	ldi	r30, 0x2D	; 45
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	8f 77       	andi	r24, 0x7F	; 127
     f00:	8c 93       	st	X, r24
#elif SPI_Interrupt==ENABLE
	SET_BIT(SPCR,SPIE);
#endif

#if SPI_Data_Order==LSB_order
	SET_BIT(SPCR,DORD);
     f02:	ad e2       	ldi	r26, 0x2D	; 45
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	ed e2       	ldi	r30, 0x2D	; 45
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 62       	ori	r24, 0x20	; 32
     f0e:	8c 93       	st	X, r24
#elif SPI_Data_Order==MSB_order
	CLR_BIT(SPCR,DORD);
#endif

#if SPI_mode==Master
	SET_BIT(SPCR,MSTR);
     f10:	ad e2       	ldi	r26, 0x2D	; 45
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ed e2       	ldi	r30, 0x2D	; 45
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	80 61       	ori	r24, 0x10	; 16
     f1c:	8c 93       	st	X, r24
#if	SCK_Frequency==fosc_4
	CLR_BIT(SPCR,SPR0);
	CLR_BIT(SPCR,SPR1);
	CLR_BIT(SPSR,SPI2X);
#elif SCK_Frequency==fosc_16
	SET_BIT(SPCR,SPR0);
     f1e:	ad e2       	ldi	r26, 0x2D	; 45
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ed e2       	ldi	r30, 0x2D	; 45
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	81 60       	ori	r24, 0x01	; 1
     f2a:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPR1);
     f2c:	ad e2       	ldi	r26, 0x2D	; 45
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	ed e2       	ldi	r30, 0x2D	; 45
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8d 7f       	andi	r24, 0xFD	; 253
     f38:	8c 93       	st	X, r24
	CLR_BIT(SPSR,SPI2X);
     f3a:	ae e2       	ldi	r26, 0x2E	; 46
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ee e2       	ldi	r30, 0x2E	; 46
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	8e 7f       	andi	r24, 0xFE	; 254
     f46:	8c 93       	st	X, r24

#endif
#if	Clock_Polarity == Rising
	CLR_BIT(SPCR,CPOL);
#elif Clock_Polarity == Falling
	SET_BIT(SPCR,CPOL);
     f48:	ad e2       	ldi	r26, 0x2D	; 45
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ed e2       	ldi	r30, 0x2D	; 45
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	88 60       	ori	r24, 0x08	; 8
     f54:	8c 93       	st	X, r24
#endif

#if	First_CPHA_Functionality==Setup
	SET_BIT(SPCR,CPHA);
     f56:	ad e2       	ldi	r26, 0x2D	; 45
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	ed e2       	ldi	r30, 0x2D	; 45
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	84 60       	ori	r24, 0x04	; 4
     f62:	8c 93       	st	X, r24
	CLR_BIT(SPCR,CPHA);
#endif


#if	 Double_SPI_Speed==DISABLE
	CLR_BIT(SPSR,SPI2X);
     f64:	ae e2       	ldi	r26, 0x2E	; 46
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	ee e2       	ldi	r30, 0x2E	; 46
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8e 7f       	andi	r24, 0xFE	; 254
     f70:	8c 93       	st	X, r24
#elif  Double_SPI_Speed==ENABLE
	SET_BIT(SPSR,SPI2X);
#endif
	 SET_BIT(SPCR,SPE);
     f72:	ad e2       	ldi	r26, 0x2D	; 45
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	ed e2       	ldi	r30, 0x2D	; 45
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	80 64       	ori	r24, 0x40	; 64
     f7e:	8c 93       	st	X, r24
}
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <SPI_TX>:

void SPI_TX(u8 data){
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	0f 92       	push	r0
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	89 83       	std	Y+1, r24	; 0x01

	/* Start transmission */
	while(1 == GET_BIT(SPSR,WCOL));
     f92:	ee e2       	ldi	r30, 0x2E	; 46
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	82 95       	swap	r24
     f9a:	86 95       	lsr	r24
     f9c:	86 95       	lsr	r24
     f9e:	83 70       	andi	r24, 0x03	; 3
     fa0:	88 2f       	mov	r24, r24
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	81 70       	andi	r24, 0x01	; 1
     fa6:	90 70       	andi	r25, 0x00	; 0
     fa8:	88 23       	and	r24, r24
     faa:	99 f7       	brne	.-26     	; 0xf92 <SPI_TX+0xc>
	SPDR = data;
     fac:	ef e2       	ldi	r30, 0x2F	; 47
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     fb4:	ee e2       	ldi	r30, 0x2E	; 46
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	88 23       	and	r24, r24
     fbc:	dc f7       	brge	.-10     	; 0xfb4 <SPI_TX+0x2e>

}
     fbe:	0f 90       	pop	r0
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <SPI_RX>:

u8 SPI_RX(void){
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62

	/* Wait for reception complete */
	while(0 == GET_BIT(SPSR,SPIF));
     fce:	ee e2       	ldi	r30, 0x2E	; 46
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	88 23       	and	r24, r24
     fd6:	dc f7       	brge	.-10     	; 0xfce <SPI_RX+0x8>
	/* Return data register */
	return SPDR;
     fd8:	ef e2       	ldi	r30, 0x2F	; 47
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
}
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <SPI_voidTransmitAsynch>:

void SPI_voidTransmitAsynch(u8 copy_u8TxData,void(*ptrToFun)(u8 copy_u8RxData))
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <SPI_voidTransmitAsynch+0x6>
     fea:	0f 92       	push	r0
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	7b 83       	std	Y+3, r23	; 0x03
     ff4:	6a 83       	std	Y+2, r22	; 0x02
	if(ptrToFun!= NULL)
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	9b 81       	ldd	r25, Y+3	; 0x03
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	89 f0       	breq	.+34     	; 0x1020 <SPI_voidTransmitAsynch+0x3c>
	{
	    // SPI Interrupt Enable
	    SET_BIT(SPCR,SPIE);
     ffe:	ad e2       	ldi	r26, 0x2D	; 45
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	ed e2       	ldi	r30, 0x2D	; 45
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	80 68       	ori	r24, 0x80	; 128
    100a:	8c 93       	st	X, r24

	    //while(1 == GET_BIT(SPI->SPSR,WCOL));
	    SPDR = copy_u8TxData;
    100c:	ef e2       	ldi	r30, 0x2F	; 47
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	80 83       	st	Z, r24

	   SPI_pCallBack = ptrToFun;
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	9b 81       	ldd	r25, Y+3	; 0x03
    1018:	90 93 2d 01 	sts	0x012D, r25
    101c:	80 93 2c 01 	sts	0x012C, r24
	}
}
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <__vector_12>:


void __vector_12(void) __attribute__ ((signal));
void __vector_12(void)
{
    102c:	1f 92       	push	r1
    102e:	0f 92       	push	r0
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	0f 92       	push	r0
    1034:	11 24       	eor	r1, r1
    1036:	2f 93       	push	r18
    1038:	3f 93       	push	r19
    103a:	4f 93       	push	r20
    103c:	5f 93       	push	r21
    103e:	6f 93       	push	r22
    1040:	7f 93       	push	r23
    1042:	8f 93       	push	r24
    1044:	9f 93       	push	r25
    1046:	af 93       	push	r26
    1048:	bf 93       	push	r27
    104a:	ef 93       	push	r30
    104c:	ff 93       	push	r31
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
	if(SPI_pCallBack != NULL)
    1056:	80 91 2c 01 	lds	r24, 0x012C
    105a:	90 91 2d 01 	lds	r25, 0x012D
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	41 f0       	breq	.+16     	; 0x1072 <__vector_12+0x46>
	{
		SPI_pCallBack(SPDR);
    1062:	e0 91 2c 01 	lds	r30, 0x012C
    1066:	f0 91 2d 01 	lds	r31, 0x012D
    106a:	af e2       	ldi	r26, 0x2F	; 47
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	8c 91       	ld	r24, X
    1070:	09 95       	icall
	}
}
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	ff 91       	pop	r31
    1078:	ef 91       	pop	r30
    107a:	bf 91       	pop	r27
    107c:	af 91       	pop	r26
    107e:	9f 91       	pop	r25
    1080:	8f 91       	pop	r24
    1082:	7f 91       	pop	r23
    1084:	6f 91       	pop	r22
    1086:	5f 91       	pop	r21
    1088:	4f 91       	pop	r20
    108a:	3f 91       	pop	r19
    108c:	2f 91       	pop	r18
    108e:	0f 90       	pop	r0
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	0f 90       	pop	r0
    1094:	1f 90       	pop	r1
    1096:	18 95       	reti

00001098 <GELOPAL_INTERRUPT_ENABLE>:
 *  Created on: Aug 2, 2023
 *      Author: shim
 */
#include "GELOPAL.h"

void GELOPAL_INTERRUPT_ENABLE(void){
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG,SREG_I);
    10a0:	af e5       	ldi	r26, 0x5F	; 95
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	ef e5       	ldi	r30, 0x5F	; 95
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 68       	ori	r24, 0x80	; 128
    10ac:	8c 93       	st	X, r24

	}
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <GELOPAL_INTERRUPT_DISABLE>:

void GELOPAL_INTERRUPT_DISABLE(void){
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SREG,SREG_I);
    10bc:	af e5       	ldi	r26, 0x5F	; 95
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	ef e5       	ldi	r30, 0x5F	; 95
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8f 77       	andi	r24, 0x7F	; 127
    10c8:	8c 93       	st	X, r24

	}
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <EXTERNAL_Init>:

/**
 1-Sense control
 2-peripheral interrupt enable */

void EXTERNAL_Init(u8 inturrupt_number){
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <EXTERNAL_Init+0x6>
    10d6:	0f 92       	push	r0
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	89 83       	std	Y+1, r24	; 0x01

	switch (inturrupt_number) {
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	3b 83       	std	Y+3, r19	; 0x03
    10e6:	2a 83       	std	Y+2, r18	; 0x02
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	9b 81       	ldd	r25, Y+3	; 0x03
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	91 05       	cpc	r25, r1
    10f0:	01 f1       	breq	.+64     	; 0x1132 <EXTERNAL_Init+0x62>
    10f2:	2a 81       	ldd	r18, Y+2	; 0x02
    10f4:	3b 81       	ldd	r19, Y+3	; 0x03
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	89 f1       	breq	.+98     	; 0x115e <EXTERNAL_Init+0x8e>
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	09 f0       	breq	.+2      	; 0x1106 <EXTERNAL_Init+0x36>
    1104:	41 c0       	rjmp	.+130    	; 0x1188 <EXTERNAL_Init+0xb8>

	case 0:/*INT0*/
		SET_BIT(MCUCR, ISC01);
    1106:	a5 e5       	ldi	r26, 0x55	; 85
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e5 e5       	ldi	r30, 0x55	; 85
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	82 60       	ori	r24, 0x02	; 2
    1112:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, ISC00);
    1114:	a5 e5       	ldi	r26, 0x55	; 85
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e5 e5       	ldi	r30, 0x55	; 85
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8e 7f       	andi	r24, 0xFE	; 254
    1120:	8c 93       	st	X, r24
		SET_BIT(GICR, INT0);
    1122:	ab e5       	ldi	r26, 0x5B	; 91
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	eb e5       	ldi	r30, 0x5B	; 91
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	80 64       	ori	r24, 0x40	; 64
    112e:	8c 93       	st	X, r24
    1130:	2b c0       	rjmp	.+86     	; 0x1188 <EXTERNAL_Init+0xb8>
		break;

	case 1:

		SET_BIT(MCUCR, ISC01);
    1132:	a5 e5       	ldi	r26, 0x55	; 85
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e5 e5       	ldi	r30, 0x55	; 85
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	82 60       	ori	r24, 0x02	; 2
    113e:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, ISC00);
    1140:	a5 e5       	ldi	r26, 0x55	; 85
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e5 e5       	ldi	r30, 0x55	; 85
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	8e 7f       	andi	r24, 0xFE	; 254
    114c:	8c 93       	st	X, r24
		SET_BIT(GICR, INT1);
    114e:	ab e5       	ldi	r26, 0x5B	; 91
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	eb e5       	ldi	r30, 0x5B	; 91
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	80 68       	ori	r24, 0x80	; 128
    115a:	8c 93       	st	X, r24
    115c:	15 c0       	rjmp	.+42     	; 0x1188 <EXTERNAL_Init+0xb8>

		break;
	case 2:
		SET_BIT(MCUCR, ISC01);
    115e:	a5 e5       	ldi	r26, 0x55	; 85
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e5 e5       	ldi	r30, 0x55	; 85
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	82 60       	ori	r24, 0x02	; 2
    116a:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, ISC00);
    116c:	a5 e5       	ldi	r26, 0x55	; 85
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e5 e5       	ldi	r30, 0x55	; 85
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	8e 7f       	andi	r24, 0xFE	; 254
    1178:	8c 93       	st	X, r24
		SET_BIT(GICR, INT2);
    117a:	ab e5       	ldi	r26, 0x5B	; 91
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	eb e5       	ldi	r30, 0x5B	; 91
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	80 62       	ori	r24, 0x20	; 32
    1186:	8c 93       	st	X, r24
		break;
	}
}
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <Dio_Init>:
/*____________________APIs Functions________________________*/
/************************************************************************************
* Service Name: Dio_Init
* Description: Function to Initialize the Dio module.
************************************************************************************/
void Dio_Init(void){
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	00 d0       	rcall	.+0      	; 0x119a <Dio_Init+0x6>
    119a:	00 d0       	rcall	.+0      	; 0x119c <Dio_Init+0x8>
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
	int i;
	for (i = 0; i < (sizeof(PIN_cfg) / sizeof(PIN_cfg[0])); i++) {
    11a0:	1a 82       	std	Y+2, r1	; 0x02
    11a2:	19 82       	std	Y+1, r1	; 0x01
    11a4:	7e c1       	rjmp	.+764    	; 0x14a2 <Dio_Init+0x30e>
		switch (PIN_cfg[i].Port) {
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	9a 81       	ldd	r25, Y+2	; 0x02
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	fc 01       	movw	r30, r24
    11b4:	e6 57       	subi	r30, 0x76	; 118
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	80 81       	ld	r24, Z
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	3c 83       	std	Y+4, r19	; 0x04
    11c0:	2b 83       	std	Y+3, r18	; 0x03
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	91 05       	cpc	r25, r1
    11ca:	09 f4       	brne	.+2      	; 0x11ce <Dio_Init+0x3a>
    11cc:	6b c0       	rjmp	.+214    	; 0x12a4 <Dio_Init+0x110>
    11ce:	2b 81       	ldd	r18, Y+3	; 0x03
    11d0:	3c 81       	ldd	r19, Y+4	; 0x04
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	31 05       	cpc	r19, r1
    11d6:	2c f4       	brge	.+10     	; 0x11e2 <Dio_Init+0x4e>
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	71 f0       	breq	.+28     	; 0x11fc <Dio_Init+0x68>
    11e0:	5b c1       	rjmp	.+694    	; 0x1498 <Dio_Init+0x304>
    11e2:	2b 81       	ldd	r18, Y+3	; 0x03
    11e4:	3c 81       	ldd	r19, Y+4	; 0x04
    11e6:	22 30       	cpi	r18, 0x02	; 2
    11e8:	31 05       	cpc	r19, r1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <Dio_Init+0x5a>
    11ec:	af c0       	rjmp	.+350    	; 0x134c <Dio_Init+0x1b8>
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	9c 81       	ldd	r25, Y+4	; 0x04
    11f2:	83 30       	cpi	r24, 0x03	; 3
    11f4:	91 05       	cpc	r25, r1
    11f6:	09 f4       	brne	.+2      	; 0x11fa <Dio_Init+0x66>
    11f8:	fd c0       	rjmp	.+506    	; 0x13f4 <Dio_Init+0x260>
    11fa:	4e c1       	rjmp	.+668    	; 0x1498 <Dio_Init+0x304>
		case Port_A:
			if (PIN_cfg[i].DIRECTION == DIO_INPUT) {
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	fc 01       	movw	r30, r24
    120a:	e4 57       	subi	r30, 0x74	; 116
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	80 81       	ld	r24, Z
    1210:	88 23       	and	r24, r24
    1212:	f1 f4       	brne	.+60     	; 0x1250 <Dio_Init+0xbc>
				CLR_BIT(DDR_A, PIN_cfg[i].Pin_Num);
    1214:	aa e3       	ldi	r26, 0x3A	; 58
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	ea e3       	ldi	r30, 0x3A	; 58
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	9a 81       	ldd	r25, Y+2	; 0x02
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	fc 01       	movw	r30, r24
    122e:	e5 57       	subi	r30, 0x75	; 117
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	80 81       	ld	r24, Z
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <Dio_Init+0xb0>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <Dio_Init+0xac>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	24 c1       	rjmp	.+584    	; 0x1498 <Dio_Init+0x304>
			}
			else if (PIN_cfg[i].DIRECTION == DIO_OUTPUT)
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	9a 81       	ldd	r25, Y+2	; 0x02
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	fc 01       	movw	r30, r24
    125e:	e4 57       	subi	r30, 0x74	; 116
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	80 81       	ld	r24, Z
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	09 f0       	breq	.+2      	; 0x126a <Dio_Init+0xd6>
    1268:	17 c1       	rjmp	.+558    	; 0x1498 <Dio_Init+0x304>
			{
				SET_BIT(DDR_A, PIN_cfg[i].Pin_Num);
    126a:	aa e3       	ldi	r26, 0x3A	; 58
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	ea e3       	ldi	r30, 0x3A	; 58
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	fc 01       	movw	r30, r24
    1284:	e5 57       	subi	r30, 0x75	; 117
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	80 81       	ld	r24, Z
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <Dio_Init+0x106>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <Dio_Init+0x102>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	fa c0       	rjmp	.+500    	; 0x1498 <Dio_Init+0x304>

			}
			break;
		case Port_B:
			if (PIN_cfg[i].DIRECTION == DIO_INPUT) {
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	fc 01       	movw	r30, r24
    12b2:	e4 57       	subi	r30, 0x74	; 116
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	80 81       	ld	r24, Z
    12b8:	88 23       	and	r24, r24
    12ba:	f1 f4       	brne	.+60     	; 0x12f8 <Dio_Init+0x164>
				CLR_BIT(DDR_B, PIN_cfg[i].Pin_Num);
    12bc:	a7 e3       	ldi	r26, 0x37	; 55
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e7 e3       	ldi	r30, 0x37	; 55
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	48 2f       	mov	r20, r24
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	9a 81       	ldd	r25, Y+2	; 0x02
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	fc 01       	movw	r30, r24
    12d6:	e5 57       	subi	r30, 0x75	; 117
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	80 81       	ld	r24, Z
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <Dio_Init+0x158>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <Dio_Init+0x154>
    12f0:	80 95       	com	r24
    12f2:	84 23       	and	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	d0 c0       	rjmp	.+416    	; 0x1498 <Dio_Init+0x304>
			}
						else if (PIN_cfg[i].DIRECTION == DIO_OUTPUT)
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	9a 81       	ldd	r25, Y+2	; 0x02
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	fc 01       	movw	r30, r24
    1306:	e4 57       	subi	r30, 0x74	; 116
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	80 81       	ld	r24, Z
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	09 f0       	breq	.+2      	; 0x1312 <Dio_Init+0x17e>
    1310:	c3 c0       	rjmp	.+390    	; 0x1498 <Dio_Init+0x304>
						{
							SET_BIT(DDR_B, PIN_cfg[i].Pin_Num);
    1312:	a7 e3       	ldi	r26, 0x37	; 55
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e7 e3       	ldi	r30, 0x37	; 55
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	fc 01       	movw	r30, r24
    132c:	e5 57       	subi	r30, 0x75	; 117
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	80 81       	ld	r24, Z
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <Dio_Init+0x1ae>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <Dio_Init+0x1aa>
    1346:	84 2b       	or	r24, r20
    1348:	8c 93       	st	X, r24
    134a:	a6 c0       	rjmp	.+332    	; 0x1498 <Dio_Init+0x304>
//							else if(PIN_cfg[i].PULL == PULL_DOWEN)
//							CLR_BIT(PORT_B, PIN_cfg[i].Pin_Num);
						}
			break;
		case Port_C:
			if (PIN_cfg[i].DIRECTION == DIO_INPUT) {
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	9a 81       	ldd	r25, Y+2	; 0x02
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	fc 01       	movw	r30, r24
    135a:	e4 57       	subi	r30, 0x74	; 116
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	80 81       	ld	r24, Z
    1360:	88 23       	and	r24, r24
    1362:	f1 f4       	brne	.+60     	; 0x13a0 <Dio_Init+0x20c>
							CLR_BIT(DDR_C, PIN_cfg[i].Pin_Num);
    1364:	a4 e3       	ldi	r26, 0x34	; 52
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e4 e3       	ldi	r30, 0x34	; 52
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	fc 01       	movw	r30, r24
    137e:	e5 57       	subi	r30, 0x75	; 117
    1380:	ff 4f       	sbci	r31, 0xFF	; 255
    1382:	80 81       	ld	r24, Z
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <Dio_Init+0x200>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <Dio_Init+0x1fc>
    1398:	80 95       	com	r24
    139a:	84 23       	and	r24, r20
    139c:	8c 93       	st	X, r24
    139e:	7c c0       	rjmp	.+248    	; 0x1498 <Dio_Init+0x304>
						}
						else if (PIN_cfg[i].DIRECTION == DIO_OUTPUT)
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	9a 81       	ldd	r25, Y+2	; 0x02
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	fc 01       	movw	r30, r24
    13ae:	e4 57       	subi	r30, 0x74	; 116
    13b0:	ff 4f       	sbci	r31, 0xFF	; 255
    13b2:	80 81       	ld	r24, Z
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	09 f0       	breq	.+2      	; 0x13ba <Dio_Init+0x226>
    13b8:	6f c0       	rjmp	.+222    	; 0x1498 <Dio_Init+0x304>
						{
							SET_BIT(DDR_C, PIN_cfg[i].Pin_Num);
    13ba:	a4 e3       	ldi	r26, 0x34	; 52
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e4 e3       	ldi	r30, 0x34	; 52
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	fc 01       	movw	r30, r24
    13d4:	e5 57       	subi	r30, 0x75	; 117
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	80 81       	ld	r24, Z
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 2e       	mov	r0, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <Dio_Init+0x256>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <Dio_Init+0x252>
    13ee:	84 2b       	or	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	52 c0       	rjmp	.+164    	; 0x1498 <Dio_Init+0x304>
//							else if(PIN_cfg[i].PULL == PULL_DOWEN)
//							CLR_BIT(PORT_C, PIN_cfg[i].Pin_Num);
						}
			break;
		case Port_D:
			if (PIN_cfg[i].DIRECTION == DIO_INPUT) {
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	fc 01       	movw	r30, r24
    1402:	e4 57       	subi	r30, 0x74	; 116
    1404:	ff 4f       	sbci	r31, 0xFF	; 255
    1406:	80 81       	ld	r24, Z
    1408:	88 23       	and	r24, r24
    140a:	f1 f4       	brne	.+60     	; 0x1448 <Dio_Init+0x2b4>
							CLR_BIT(DDR_D, PIN_cfg[i].Pin_Num);
    140c:	a1 e3       	ldi	r26, 0x31	; 49
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e1 e3       	ldi	r30, 0x31	; 49
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	fc 01       	movw	r30, r24
    1426:	e5 57       	subi	r30, 0x75	; 117
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	80 81       	ld	r24, Z
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <Dio_Init+0x2a8>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <Dio_Init+0x2a4>
    1440:	80 95       	com	r24
    1442:	84 23       	and	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	28 c0       	rjmp	.+80     	; 0x1498 <Dio_Init+0x304>
						}
						else if (PIN_cfg[i].DIRECTION == DIO_OUTPUT)
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	9a 81       	ldd	r25, Y+2	; 0x02
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	fc 01       	movw	r30, r24
    1456:	e4 57       	subi	r30, 0x74	; 116
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	80 81       	ld	r24, Z
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	e1 f4       	brne	.+56     	; 0x1498 <Dio_Init+0x304>
						{
							SET_BIT(DDR_D, PIN_cfg[i].Pin_Num);
    1460:	a1 e3       	ldi	r26, 0x31	; 49
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e1 e3       	ldi	r30, 0x31	; 49
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	9a 81       	ldd	r25, Y+2	; 0x02
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	fc 01       	movw	r30, r24
    147a:	e5 57       	subi	r30, 0x75	; 117
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	80 81       	ld	r24, Z
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 2e       	mov	r0, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <Dio_Init+0x2fc>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	0a 94       	dec	r0
    1492:	e2 f7       	brpl	.-8      	; 0x148c <Dio_Init+0x2f8>
    1494:	84 2b       	or	r24, r20
    1496:	8c 93       	st	X, r24
* Service Name: Dio_Init
* Description: Function to Initialize the Dio module.
************************************************************************************/
void Dio_Init(void){
	int i;
	for (i = 0; i < (sizeof(PIN_cfg) / sizeof(PIN_cfg[0])); i++) {
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	9a 83       	std	Y+2, r25	; 0x02
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	9a 81       	ldd	r25, Y+2	; 0x02
    14a6:	80 32       	cpi	r24, 0x20	; 32
    14a8:	91 05       	cpc	r25, r1
    14aa:	08 f4       	brcc	.+2      	; 0x14ae <Dio_Init+0x31a>
    14ac:	7c ce       	rjmp	.-776    	; 0x11a6 <Dio_Init+0x12>
			break;

		}
	}

}
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <Dio_WriteChannel>:

/************************************************************************************
* Service Name: Dio_WriteChannel
* Description: Function to set a level of a channel.
************************************************************************************/
void Dio_WriteChannel(PIN_Channel_Type channel, PIN_Status_Type status){
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <Dio_WriteChannel+0x6>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <Dio_WriteChannel+0x8>
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <Dio_WriteChannel+0xa>
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	8b 83       	std	Y+3, r24	; 0x03
    14cc:	6c 83       	std	Y+4, r22	; 0x04
	u8 PORT_NUM = channel / defult_size;
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	86 95       	lsr	r24
    14d2:	86 95       	lsr	r24
    14d4:	86 95       	lsr	r24
    14d6:	8a 83       	std	Y+2, r24	; 0x02
	u8 PIN_NUM = channel % defult_size;
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	87 70       	andi	r24, 0x07	; 7
    14dc:	89 83       	std	Y+1, r24	; 0x01
	switch (PORT_NUM) {
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	3e 83       	std	Y+6, r19	; 0x06
    14e6:	2d 83       	std	Y+5, r18	; 0x05
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	91 05       	cpc	r25, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <Dio_WriteChannel+0x38>
    14f2:	5a c0       	rjmp	.+180    	; 0x15a8 <Dio_WriteChannel+0xec>
    14f4:	2d 81       	ldd	r18, Y+5	; 0x05
    14f6:	3e 81       	ldd	r19, Y+6	; 0x06
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	2c f4       	brge	.+10     	; 0x1508 <Dio_WriteChannel+0x4c>
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	71 f0       	breq	.+28     	; 0x1522 <Dio_WriteChannel+0x66>
    1506:	17 c1       	rjmp	.+558    	; 0x1736 <Dio_WriteChannel+0x27a>
    1508:	2d 81       	ldd	r18, Y+5	; 0x05
    150a:	3e 81       	ldd	r19, Y+6	; 0x06
    150c:	22 30       	cpi	r18, 0x02	; 2
    150e:	31 05       	cpc	r19, r1
    1510:	09 f4       	brne	.+2      	; 0x1514 <Dio_WriteChannel+0x58>
    1512:	8d c0       	rjmp	.+282    	; 0x162e <Dio_WriteChannel+0x172>
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	83 30       	cpi	r24, 0x03	; 3
    151a:	91 05       	cpc	r25, r1
    151c:	09 f4       	brne	.+2      	; 0x1520 <Dio_WriteChannel+0x64>
    151e:	ca c0       	rjmp	.+404    	; 0x16b4 <Dio_WriteChannel+0x1f8>
    1520:	0a c1       	rjmp	.+532    	; 0x1736 <Dio_WriteChannel+0x27a>
	case Port_A:
		SET_BIT(DDR_A, PIN_NUM);
    1522:	aa e3       	ldi	r26, 0x3A	; 58
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	ea e3       	ldi	r30, 0x3A	; 58
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <Dio_WriteChannel+0x84>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <Dio_WriteChannel+0x80>
    1544:	84 2b       	or	r24, r20
    1546:	8c 93       	st	X, r24
		if (status == LOW) {
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
    154a:	88 23       	and	r24, r24
    154c:	a9 f4       	brne	.+42     	; 0x1578 <Dio_WriteChannel+0xbc>
			CLR_BIT(PORT_A, PIN_NUM);
    154e:	ab e3       	ldi	r26, 0x3B	; 59
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	eb e3       	ldi	r30, 0x3B	; 59
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <Dio_WriteChannel+0xb0>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <Dio_WriteChannel+0xac>
    1570:	80 95       	com	r24
    1572:	84 23       	and	r24, r20
    1574:	8c 93       	st	X, r24
    1576:	df c0       	rjmp	.+446    	; 0x1736 <Dio_WriteChannel+0x27a>
		}
		else if (status == HIGH){
    1578:	8c 81       	ldd	r24, Y+4	; 0x04
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	09 f0       	breq	.+2      	; 0x1580 <Dio_WriteChannel+0xc4>
    157e:	db c0       	rjmp	.+438    	; 0x1736 <Dio_WriteChannel+0x27a>
			SET_BIT(PORT_A, PIN_NUM);
    1580:	ab e3       	ldi	r26, 0x3B	; 59
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	eb e3       	ldi	r30, 0x3B	; 59
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <Dio_WriteChannel+0xe2>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <Dio_WriteChannel+0xde>
    15a2:	84 2b       	or	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	c7 c0       	rjmp	.+398    	; 0x1736 <Dio_WriteChannel+0x27a>
		}
		break;
	case Port_B:
		SET_BIT(DDR_B, PIN_NUM);
    15a8:	a7 e3       	ldi	r26, 0x37	; 55
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e7 e3       	ldi	r30, 0x37	; 55
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <Dio_WriteChannel+0x10a>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <Dio_WriteChannel+0x106>
    15ca:	84 2b       	or	r24, r20
    15cc:	8c 93       	st	X, r24
		if (status == LOW) {
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	88 23       	and	r24, r24
    15d2:	a9 f4       	brne	.+42     	; 0x15fe <Dio_WriteChannel+0x142>
			CLR_BIT(PORT_B, PIN_NUM);
    15d4:	a8 e3       	ldi	r26, 0x38	; 56
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e8 e3       	ldi	r30, 0x38	; 56
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <Dio_WriteChannel+0x136>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <Dio_WriteChannel+0x132>
    15f6:	80 95       	com	r24
    15f8:	84 23       	and	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	9c c0       	rjmp	.+312    	; 0x1736 <Dio_WriteChannel+0x27a>
		}
		else if (status == HIGH){
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	09 f0       	breq	.+2      	; 0x1606 <Dio_WriteChannel+0x14a>
    1604:	98 c0       	rjmp	.+304    	; 0x1736 <Dio_WriteChannel+0x27a>
			SET_BIT(PORT_B, PIN_NUM);
    1606:	a8 e3       	ldi	r26, 0x38	; 56
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e8 e3       	ldi	r30, 0x38	; 56
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	48 2f       	mov	r20, r24
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	02 2e       	mov	r0, r18
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <Dio_WriteChannel+0x168>
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	0a 94       	dec	r0
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <Dio_WriteChannel+0x164>
    1628:	84 2b       	or	r24, r20
    162a:	8c 93       	st	X, r24
    162c:	84 c0       	rjmp	.+264    	; 0x1736 <Dio_WriteChannel+0x27a>
		}
		break;
	case Port_C:
		SET_BIT(DDR_C, PIN_NUM);
    162e:	a4 e3       	ldi	r26, 0x34	; 52
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e4 e3       	ldi	r30, 0x34	; 52
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 2e       	mov	r0, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <Dio_WriteChannel+0x190>
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	0a 94       	dec	r0
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <Dio_WriteChannel+0x18c>
    1650:	84 2b       	or	r24, r20
    1652:	8c 93       	st	X, r24
		if (status == LOW) {
    1654:	8c 81       	ldd	r24, Y+4	; 0x04
    1656:	88 23       	and	r24, r24
    1658:	a9 f4       	brne	.+42     	; 0x1684 <Dio_WriteChannel+0x1c8>
			CLR_BIT(PORT_C, PIN_NUM);
    165a:	a5 e3       	ldi	r26, 0x35	; 53
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e5 e3       	ldi	r30, 0x35	; 53
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 2e       	mov	r0, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <Dio_WriteChannel+0x1bc>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <Dio_WriteChannel+0x1b8>
    167c:	80 95       	com	r24
    167e:	84 23       	and	r24, r20
    1680:	8c 93       	st	X, r24
    1682:	59 c0       	rjmp	.+178    	; 0x1736 <Dio_WriteChannel+0x27a>
		}
		else if (status == HIGH){
    1684:	8c 81       	ldd	r24, Y+4	; 0x04
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	09 f0       	breq	.+2      	; 0x168c <Dio_WriteChannel+0x1d0>
    168a:	55 c0       	rjmp	.+170    	; 0x1736 <Dio_WriteChannel+0x27a>
			SET_BIT(PORT_C, PIN_NUM);
    168c:	a5 e3       	ldi	r26, 0x35	; 53
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e5 e3       	ldi	r30, 0x35	; 53
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	48 2f       	mov	r20, r24
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	02 2e       	mov	r0, r18
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <Dio_WriteChannel+0x1ee>
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	0a 94       	dec	r0
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <Dio_WriteChannel+0x1ea>
    16ae:	84 2b       	or	r24, r20
    16b0:	8c 93       	st	X, r24
    16b2:	41 c0       	rjmp	.+130    	; 0x1736 <Dio_WriteChannel+0x27a>
		}
		break;
	case Port_D:
		SET_BIT(DDR_D, PIN_NUM);
    16b4:	a1 e3       	ldi	r26, 0x31	; 49
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e1 e3       	ldi	r30, 0x31	; 49
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	48 2f       	mov	r20, r24
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	02 2e       	mov	r0, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <Dio_WriteChannel+0x216>
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	0a 94       	dec	r0
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <Dio_WriteChannel+0x212>
    16d6:	84 2b       	or	r24, r20
    16d8:	8c 93       	st	X, r24
		if (status == LOW) {
    16da:	8c 81       	ldd	r24, Y+4	; 0x04
    16dc:	88 23       	and	r24, r24
    16de:	a9 f4       	brne	.+42     	; 0x170a <Dio_WriteChannel+0x24e>
			CLR_BIT(PORT_D, PIN_NUM);
    16e0:	a2 e3       	ldi	r26, 0x32	; 50
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e2 e3       	ldi	r30, 0x32	; 50
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	48 2f       	mov	r20, r24
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 2e       	mov	r0, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <Dio_WriteChannel+0x242>
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	0a 94       	dec	r0
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <Dio_WriteChannel+0x23e>
    1702:	80 95       	com	r24
    1704:	84 23       	and	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	16 c0       	rjmp	.+44     	; 0x1736 <Dio_WriteChannel+0x27a>
		}
		else if (status == HIGH){
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	99 f4       	brne	.+38     	; 0x1736 <Dio_WriteChannel+0x27a>
			SET_BIT(PORT_D, PIN_NUM);
    1710:	a2 e3       	ldi	r26, 0x32	; 50
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e2 e3       	ldi	r30, 0x32	; 50
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	48 2f       	mov	r20, r24
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 2e       	mov	r0, r18
    1728:	02 c0       	rjmp	.+4      	; 0x172e <Dio_WriteChannel+0x272>
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	0a 94       	dec	r0
    1730:	e2 f7       	brpl	.-8      	; 0x172a <Dio_WriteChannel+0x26e>
    1732:	84 2b       	or	r24, r20
    1734:	8c 93       	st	X, r24
		break;

	default:
		break;
	}
}
    1736:	26 96       	adiw	r28, 0x06	; 6
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <Dio_ReadChannel>:
/************************************************************************************
* Service Name: Dio_ReadChannel
* Description: Function to return the value of the specified DIO channel.
************************************************************************************/
PIN_Status_Type Dio_ReadChannel(PIN_Channel_Type channel){
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	00 d0       	rcall	.+0      	; 0x174e <Dio_ReadChannel+0x6>
    174e:	00 d0       	rcall	.+0      	; 0x1750 <Dio_ReadChannel+0x8>
    1750:	00 d0       	rcall	.+0      	; 0x1752 <Dio_ReadChannel+0xa>
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	8c 83       	std	Y+4, r24	; 0x04
	u8 PORT_NUM = channel / defult_size;
    1758:	8c 81       	ldd	r24, Y+4	; 0x04
    175a:	86 95       	lsr	r24
    175c:	86 95       	lsr	r24
    175e:	86 95       	lsr	r24
    1760:	8b 83       	std	Y+3, r24	; 0x03
	u8 PIN_NUM = channel % defult_size;
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	87 70       	andi	r24, 0x07	; 7
    1766:	8a 83       	std	Y+2, r24	; 0x02
	PIN_Status_Type status;
	switch (PORT_NUM) {
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	3e 83       	std	Y+6, r19	; 0x06
    1770:	2d 83       	std	Y+5, r18	; 0x05
    1772:	4d 81       	ldd	r20, Y+5	; 0x05
    1774:	5e 81       	ldd	r21, Y+6	; 0x06
    1776:	41 30       	cpi	r20, 0x01	; 1
    1778:	51 05       	cpc	r21, r1
    177a:	41 f1       	breq	.+80     	; 0x17cc <Dio_ReadChannel+0x84>
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	82 30       	cpi	r24, 0x02	; 2
    1782:	91 05       	cpc	r25, r1
    1784:	34 f4       	brge	.+12     	; 0x1792 <Dio_ReadChannel+0x4a>
    1786:	2d 81       	ldd	r18, Y+5	; 0x05
    1788:	3e 81       	ldd	r19, Y+6	; 0x06
    178a:	21 15       	cp	r18, r1
    178c:	31 05       	cpc	r19, r1
    178e:	61 f0       	breq	.+24     	; 0x17a8 <Dio_ReadChannel+0x60>
    1790:	52 c0       	rjmp	.+164    	; 0x1836 <Dio_ReadChannel+0xee>
    1792:	4d 81       	ldd	r20, Y+5	; 0x05
    1794:	5e 81       	ldd	r21, Y+6	; 0x06
    1796:	42 30       	cpi	r20, 0x02	; 2
    1798:	51 05       	cpc	r21, r1
    179a:	51 f1       	breq	.+84     	; 0x17f0 <Dio_ReadChannel+0xa8>
    179c:	8d 81       	ldd	r24, Y+5	; 0x05
    179e:	9e 81       	ldd	r25, Y+6	; 0x06
    17a0:	83 30       	cpi	r24, 0x03	; 3
    17a2:	91 05       	cpc	r25, r1
    17a4:	b9 f1       	breq	.+110    	; 0x1814 <Dio_ReadChannel+0xcc>
    17a6:	47 c0       	rjmp	.+142    	; 0x1836 <Dio_ReadChannel+0xee>
	case Port_A:
		//SET_BIT(DDR_A, PIN_NUM);
		status = GET_BIT(PIN_A, PIN_NUM);
    17a8:	e9 e3       	ldi	r30, 0x39	; 57
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a9 01       	movw	r20, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <Dio_ReadChannel+0x78>
    17bc:	55 95       	asr	r21
    17be:	47 95       	ror	r20
    17c0:	8a 95       	dec	r24
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <Dio_ReadChannel+0x74>
    17c4:	ca 01       	movw	r24, r20
    17c6:	81 70       	andi	r24, 0x01	; 1
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	35 c0       	rjmp	.+106    	; 0x1836 <Dio_ReadChannel+0xee>
		break;
	case Port_B:
		//SET_BIT(DDR_B, PIN_NUM);
		status = GET_BIT(PIN_B, PIN_NUM);
    17cc:	e6 e3       	ldi	r30, 0x36	; 54
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a9 01       	movw	r20, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <Dio_ReadChannel+0x9c>
    17e0:	55 95       	asr	r21
    17e2:	47 95       	ror	r20
    17e4:	8a 95       	dec	r24
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <Dio_ReadChannel+0x98>
    17e8:	ca 01       	movw	r24, r20
    17ea:	81 70       	andi	r24, 0x01	; 1
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	23 c0       	rjmp	.+70     	; 0x1836 <Dio_ReadChannel+0xee>
		break;
	case Port_C:
		//SET_BIT(DDR_C, PIN_NUM);
		status = GET_BIT(PIN_C, PIN_NUM);
    17f0:	e3 e3       	ldi	r30, 0x33	; 51
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	a9 01       	movw	r20, r18
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <Dio_ReadChannel+0xc0>
    1804:	55 95       	asr	r21
    1806:	47 95       	ror	r20
    1808:	8a 95       	dec	r24
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <Dio_ReadChannel+0xbc>
    180c:	ca 01       	movw	r24, r20
    180e:	81 70       	andi	r24, 0x01	; 1
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	11 c0       	rjmp	.+34     	; 0x1836 <Dio_ReadChannel+0xee>
		break;
	case Port_D:
		//SET_BIT(DDR_D, PIN_NUM);
		status = GET_BIT(PIN_D, PIN_NUM);
    1814:	e0 e3       	ldi	r30, 0x30	; 48
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	a9 01       	movw	r20, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <Dio_ReadChannel+0xe4>
    1828:	55 95       	asr	r21
    182a:	47 95       	ror	r20
    182c:	8a 95       	dec	r24
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <Dio_ReadChannel+0xe0>
    1830:	ca 01       	movw	r24, r20
    1832:	81 70       	andi	r24, 0x01	; 1
    1834:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return status;
    1836:	89 81       	ldd	r24, Y+1	; 0x01
}
    1838:	26 96       	adiw	r28, 0x06	; 6
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <DIO_setPinDirection>:

void DIO_setPinDirection(PIN_Channel_Type channel,PIN_DIRECTION_TYPE DIRECTION){
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	28 97       	sbiw	r28, 0x08	; 8
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	8b 83       	std	Y+3, r24	; 0x03
    1860:	6c 83       	std	Y+4, r22	; 0x04
	u8 PORT_NUM = channel / defult_size;
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	86 95       	lsr	r24
    1866:	86 95       	lsr	r24
    1868:	86 95       	lsr	r24
    186a:	8a 83       	std	Y+2, r24	; 0x02
	u8 PIN_NUM = channel % defult_size;
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	87 70       	andi	r24, 0x07	; 7
    1870:	89 83       	std	Y+1, r24	; 0x01
	if(DIRECTION==DIO_OUTPUT){
    1872:	8c 81       	ldd	r24, Y+4	; 0x04
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	09 f0       	breq	.+2      	; 0x187a <DIO_setPinDirection+0x30>
    1878:	6f c0       	rjmp	.+222    	; 0x1958 <DIO_setPinDirection+0x10e>
	switch (PORT_NUM){
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	38 87       	std	Y+8, r19	; 0x08
    1882:	2f 83       	std	Y+7, r18	; 0x07
    1884:	8f 81       	ldd	r24, Y+7	; 0x07
    1886:	98 85       	ldd	r25, Y+8	; 0x08
    1888:	81 30       	cpi	r24, 0x01	; 1
    188a:	91 05       	cpc	r25, r1
    188c:	49 f1       	breq	.+82     	; 0x18e0 <DIO_setPinDirection+0x96>
    188e:	2f 81       	ldd	r18, Y+7	; 0x07
    1890:	38 85       	ldd	r19, Y+8	; 0x08
    1892:	22 30       	cpi	r18, 0x02	; 2
    1894:	31 05       	cpc	r19, r1
    1896:	2c f4       	brge	.+10     	; 0x18a2 <DIO_setPinDirection+0x58>
    1898:	8f 81       	ldd	r24, Y+7	; 0x07
    189a:	98 85       	ldd	r25, Y+8	; 0x08
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	61 f0       	breq	.+24     	; 0x18b8 <DIO_setPinDirection+0x6e>
    18a0:	d2 c0       	rjmp	.+420    	; 0x1a46 <DIO_setPinDirection+0x1fc>
    18a2:	2f 81       	ldd	r18, Y+7	; 0x07
    18a4:	38 85       	ldd	r19, Y+8	; 0x08
    18a6:	22 30       	cpi	r18, 0x02	; 2
    18a8:	31 05       	cpc	r19, r1
    18aa:	71 f1       	breq	.+92     	; 0x1908 <DIO_setPinDirection+0xbe>
    18ac:	8f 81       	ldd	r24, Y+7	; 0x07
    18ae:	98 85       	ldd	r25, Y+8	; 0x08
    18b0:	83 30       	cpi	r24, 0x03	; 3
    18b2:	91 05       	cpc	r25, r1
    18b4:	e9 f1       	breq	.+122    	; 0x1930 <DIO_setPinDirection+0xe6>
    18b6:	c7 c0       	rjmp	.+398    	; 0x1a46 <DIO_setPinDirection+0x1fc>
		case Port_A:
			SET_BIT(DDR_A,PIN_NUM);
    18b8:	aa e3       	ldi	r26, 0x3A	; 58
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	ea e3       	ldi	r30, 0x3A	; 58
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	48 2f       	mov	r20, r24
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	02 2e       	mov	r0, r18
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <DIO_setPinDirection+0x8c>
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	0a 94       	dec	r0
    18d8:	e2 f7       	brpl	.-8      	; 0x18d2 <DIO_setPinDirection+0x88>
    18da:	84 2b       	or	r24, r20
    18dc:	8c 93       	st	X, r24
    18de:	b3 c0       	rjmp	.+358    	; 0x1a46 <DIO_setPinDirection+0x1fc>
			break;
		case Port_B:
			SET_BIT(DDR_B,PIN_NUM);
    18e0:	a7 e3       	ldi	r26, 0x37	; 55
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e7 e3       	ldi	r30, 0x37	; 55
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	48 2f       	mov	r20, r24
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 2e       	mov	r0, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <DIO_setPinDirection+0xb4>
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	0a 94       	dec	r0
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <DIO_setPinDirection+0xb0>
    1902:	84 2b       	or	r24, r20
    1904:	8c 93       	st	X, r24
    1906:	9f c0       	rjmp	.+318    	; 0x1a46 <DIO_setPinDirection+0x1fc>
			break;
		case Port_C:
			SET_BIT(DDR_C,PIN_NUM);
    1908:	a4 e3       	ldi	r26, 0x34	; 52
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e4 e3       	ldi	r30, 0x34	; 52
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	48 2f       	mov	r20, r24
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	02 2e       	mov	r0, r18
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <DIO_setPinDirection+0xdc>
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	0a 94       	dec	r0
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <DIO_setPinDirection+0xd8>
    192a:	84 2b       	or	r24, r20
    192c:	8c 93       	st	X, r24
    192e:	8b c0       	rjmp	.+278    	; 0x1a46 <DIO_setPinDirection+0x1fc>
			break;
		case Port_D:
			SET_BIT(DDR_D,PIN_NUM);
    1930:	a1 e3       	ldi	r26, 0x31	; 49
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e1 e3       	ldi	r30, 0x31	; 49
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	48 2f       	mov	r20, r24
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 2e       	mov	r0, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <DIO_setPinDirection+0x104>
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	0a 94       	dec	r0
    1950:	e2 f7       	brpl	.-8      	; 0x194a <DIO_setPinDirection+0x100>
    1952:	84 2b       	or	r24, r20
    1954:	8c 93       	st	X, r24
    1956:	77 c0       	rjmp	.+238    	; 0x1a46 <DIO_setPinDirection+0x1fc>
			break;
	}
	}
	else if(DIRECTION==DIO_INPUT)
    1958:	8c 81       	ldd	r24, Y+4	; 0x04
    195a:	88 23       	and	r24, r24
    195c:	09 f0       	breq	.+2      	; 0x1960 <DIO_setPinDirection+0x116>
    195e:	73 c0       	rjmp	.+230    	; 0x1a46 <DIO_setPinDirection+0x1fc>
	{
	switch (PORT_NUM) {
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	3e 83       	std	Y+6, r19	; 0x06
    1968:	2d 83       	std	Y+5, r18	; 0x05
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	91 05       	cpc	r25, r1
    1972:	59 f1       	breq	.+86     	; 0x19ca <DIO_setPinDirection+0x180>
    1974:	2d 81       	ldd	r18, Y+5	; 0x05
    1976:	3e 81       	ldd	r19, Y+6	; 0x06
    1978:	22 30       	cpi	r18, 0x02	; 2
    197a:	31 05       	cpc	r19, r1
    197c:	2c f4       	brge	.+10     	; 0x1988 <DIO_setPinDirection+0x13e>
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	69 f0       	breq	.+26     	; 0x19a0 <DIO_setPinDirection+0x156>
    1986:	5f c0       	rjmp	.+190    	; 0x1a46 <DIO_setPinDirection+0x1fc>
    1988:	2d 81       	ldd	r18, Y+5	; 0x05
    198a:	3e 81       	ldd	r19, Y+6	; 0x06
    198c:	22 30       	cpi	r18, 0x02	; 2
    198e:	31 05       	cpc	r19, r1
    1990:	89 f1       	breq	.+98     	; 0x19f4 <DIO_setPinDirection+0x1aa>
    1992:	8d 81       	ldd	r24, Y+5	; 0x05
    1994:	9e 81       	ldd	r25, Y+6	; 0x06
    1996:	83 30       	cpi	r24, 0x03	; 3
    1998:	91 05       	cpc	r25, r1
    199a:	09 f4       	brne	.+2      	; 0x199e <DIO_setPinDirection+0x154>
    199c:	40 c0       	rjmp	.+128    	; 0x1a1e <DIO_setPinDirection+0x1d4>
    199e:	53 c0       	rjmp	.+166    	; 0x1a46 <DIO_setPinDirection+0x1fc>
	case Port_A:
		CLR_BIT(DDR_A,PIN_NUM);
    19a0:	aa e3       	ldi	r26, 0x3A	; 58
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	ea e3       	ldi	r30, 0x3A	; 58
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	48 2f       	mov	r20, r24
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 2e       	mov	r0, r18
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <DIO_setPinDirection+0x174>
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	0a 94       	dec	r0
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <DIO_setPinDirection+0x170>
    19c2:	80 95       	com	r24
    19c4:	84 23       	and	r24, r20
    19c6:	8c 93       	st	X, r24
    19c8:	3e c0       	rjmp	.+124    	; 0x1a46 <DIO_setPinDirection+0x1fc>
		break;
	case Port_B:
		CLR_BIT(DDR_B,PIN_NUM);
    19ca:	a7 e3       	ldi	r26, 0x37	; 55
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e7 e3       	ldi	r30, 0x37	; 55
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	48 2f       	mov	r20, r24
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	02 2e       	mov	r0, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <DIO_setPinDirection+0x19e>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	0a 94       	dec	r0
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <DIO_setPinDirection+0x19a>
    19ec:	80 95       	com	r24
    19ee:	84 23       	and	r24, r20
    19f0:	8c 93       	st	X, r24
    19f2:	29 c0       	rjmp	.+82     	; 0x1a46 <DIO_setPinDirection+0x1fc>
		break;
	case Port_C:
		CLR_BIT(DDR_C,PIN_NUM);
    19f4:	a4 e3       	ldi	r26, 0x34	; 52
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e4 e3       	ldi	r30, 0x34	; 52
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	02 2e       	mov	r0, r18
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <DIO_setPinDirection+0x1c8>
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	0a 94       	dec	r0
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <DIO_setPinDirection+0x1c4>
    1a16:	80 95       	com	r24
    1a18:	84 23       	and	r24, r20
    1a1a:	8c 93       	st	X, r24
    1a1c:	14 c0       	rjmp	.+40     	; 0x1a46 <DIO_setPinDirection+0x1fc>
		break;
	case Port_D:
		CLR_BIT(DDR_D,PIN_NUM);
    1a1e:	a1 e3       	ldi	r26, 0x31	; 49
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e1 e3       	ldi	r30, 0x31	; 49
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	48 2f       	mov	r20, r24
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 2e       	mov	r0, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <DIO_setPinDirection+0x1f2>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <DIO_setPinDirection+0x1ee>
    1a40:	80 95       	com	r24
    1a42:	84 23       	and	r24, r20
    1a44:	8c 93       	st	X, r24
		break;
	}
	}
}
    1a46:	28 96       	adiw	r28, 0x08	; 8
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <DIO_PULL_RES>:

void DIO_PULL_RES(PIN_Channel_Type channel,RESISTOR_Type Pull){
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <DIO_PULL_RES+0x6>
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <DIO_PULL_RES+0x8>
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <DIO_PULL_RES+0xa>
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	8b 83       	std	Y+3, r24	; 0x03
    1a68:	6c 83       	std	Y+4, r22	; 0x04
	u8 PORT_NUM = channel / defult_size;
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	86 95       	lsr	r24
    1a6e:	86 95       	lsr	r24
    1a70:	86 95       	lsr	r24
    1a72:	8a 83       	std	Y+2, r24	; 0x02
	u8 PIN_NUM = channel % defult_size;
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	87 70       	andi	r24, 0x07	; 7
    1a78:	89 83       	std	Y+1, r24	; 0x01
	switch (PORT_NUM) {
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	3e 83       	std	Y+6, r19	; 0x06
    1a82:	2d 83       	std	Y+5, r18	; 0x05
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <DIO_PULL_RES+0x38>
    1a8e:	47 c0       	rjmp	.+142    	; 0x1b1e <DIO_PULL_RES+0xc6>
    1a90:	2d 81       	ldd	r18, Y+5	; 0x05
    1a92:	3e 81       	ldd	r19, Y+6	; 0x06
    1a94:	22 30       	cpi	r18, 0x02	; 2
    1a96:	31 05       	cpc	r19, r1
    1a98:	2c f4       	brge	.+10     	; 0x1aa4 <DIO_PULL_RES+0x4c>
    1a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	71 f0       	breq	.+28     	; 0x1abe <DIO_PULL_RES+0x66>
    1aa2:	cb c0       	rjmp	.+406    	; 0x1c3a <DIO_PULL_RES+0x1e2>
    1aa4:	2d 81       	ldd	r18, Y+5	; 0x05
    1aa6:	3e 81       	ldd	r19, Y+6	; 0x06
    1aa8:	22 30       	cpi	r18, 0x02	; 2
    1aaa:	31 05       	cpc	r19, r1
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <DIO_PULL_RES+0x58>
    1aae:	67 c0       	rjmp	.+206    	; 0x1b7e <DIO_PULL_RES+0x126>
    1ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab4:	83 30       	cpi	r24, 0x03	; 3
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <DIO_PULL_RES+0x64>
    1aba:	91 c0       	rjmp	.+290    	; 0x1bde <DIO_PULL_RES+0x186>
    1abc:	be c0       	rjmp	.+380    	; 0x1c3a <DIO_PULL_RES+0x1e2>
	case Port_A:
   if(Pull == PULL_UP)
    1abe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac0:	88 23       	and	r24, r24
    1ac2:	a1 f4       	brne	.+40     	; 0x1aec <DIO_PULL_RES+0x94>
	SET_BIT(PORT_A,PIN_NUM);
    1ac4:	ab e3       	ldi	r26, 0x3B	; 59
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	eb e3       	ldi	r30, 0x3B	; 59
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	48 2f       	mov	r20, r24
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	02 2e       	mov	r0, r18
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <DIO_PULL_RES+0x8a>
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	0a 94       	dec	r0
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <DIO_PULL_RES+0x86>
    1ae6:	84 2b       	or	r24, r20
    1ae8:	8c 93       	st	X, r24
    1aea:	a7 c0       	rjmp	.+334    	; 0x1c3a <DIO_PULL_RES+0x1e2>
	else if(Pull == PULL_DOWEN)
    1aec:	8c 81       	ldd	r24, Y+4	; 0x04
    1aee:	81 30       	cpi	r24, 0x01	; 1
    1af0:	09 f0       	breq	.+2      	; 0x1af4 <DIO_PULL_RES+0x9c>
    1af2:	a3 c0       	rjmp	.+326    	; 0x1c3a <DIO_PULL_RES+0x1e2>
	CLR_BIT(PORT_A,PIN_NUM);
    1af4:	ab e3       	ldi	r26, 0x3B	; 59
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	eb e3       	ldi	r30, 0x3B	; 59
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	48 2f       	mov	r20, r24
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 2e       	mov	r0, r18
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <DIO_PULL_RES+0xba>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	0a 94       	dec	r0
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <DIO_PULL_RES+0xb6>
    1b16:	80 95       	com	r24
    1b18:	84 23       	and	r24, r20
    1b1a:	8c 93       	st	X, r24
    1b1c:	8e c0       	rjmp	.+284    	; 0x1c3a <DIO_PULL_RES+0x1e2>
   break;
	case Port_B:
	 if(Pull == PULL_UP)
    1b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b20:	88 23       	and	r24, r24
    1b22:	a1 f4       	brne	.+40     	; 0x1b4c <DIO_PULL_RES+0xf4>
		SET_BIT(PORT_B,PIN_NUM);
    1b24:	a8 e3       	ldi	r26, 0x38	; 56
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e8 e3       	ldi	r30, 0x38	; 56
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	48 2f       	mov	r20, r24
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	02 2e       	mov	r0, r18
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <DIO_PULL_RES+0xea>
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	0a 94       	dec	r0
    1b44:	e2 f7       	brpl	.-8      	; 0x1b3e <DIO_PULL_RES+0xe6>
    1b46:	84 2b       	or	r24, r20
    1b48:	8c 93       	st	X, r24
    1b4a:	77 c0       	rjmp	.+238    	; 0x1c3a <DIO_PULL_RES+0x1e2>
		else if(Pull == PULL_DOWEN)
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	81 30       	cpi	r24, 0x01	; 1
    1b50:	09 f0       	breq	.+2      	; 0x1b54 <DIO_PULL_RES+0xfc>
    1b52:	73 c0       	rjmp	.+230    	; 0x1c3a <DIO_PULL_RES+0x1e2>
		CLR_BIT(PORT_B,PIN_NUM);
    1b54:	a8 e3       	ldi	r26, 0x38	; 56
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e8 e3       	ldi	r30, 0x38	; 56
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	48 2f       	mov	r20, r24
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 2e       	mov	r0, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <DIO_PULL_RES+0x11a>
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	0a 94       	dec	r0
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <DIO_PULL_RES+0x116>
    1b76:	80 95       	com	r24
    1b78:	84 23       	and	r24, r20
    1b7a:	8c 93       	st	X, r24
    1b7c:	5e c0       	rjmp	.+188    	; 0x1c3a <DIO_PULL_RES+0x1e2>
	  break;
	case Port_C:
	if(Pull == PULL_UP)
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b80:	88 23       	and	r24, r24
    1b82:	a1 f4       	brne	.+40     	; 0x1bac <DIO_PULL_RES+0x154>
		SET_BIT(PORT_C,PIN_NUM);
    1b84:	a5 e3       	ldi	r26, 0x35	; 53
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e5 e3       	ldi	r30, 0x35	; 53
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	48 2f       	mov	r20, r24
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	02 2e       	mov	r0, r18
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <DIO_PULL_RES+0x14a>
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	0a 94       	dec	r0
    1ba4:	e2 f7       	brpl	.-8      	; 0x1b9e <DIO_PULL_RES+0x146>
    1ba6:	84 2b       	or	r24, r20
    1ba8:	8c 93       	st	X, r24
    1baa:	47 c0       	rjmp	.+142    	; 0x1c3a <DIO_PULL_RES+0x1e2>
		else if(Pull == PULL_DOWEN)
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <DIO_PULL_RES+0x15c>
    1bb2:	43 c0       	rjmp	.+134    	; 0x1c3a <DIO_PULL_RES+0x1e2>
		CLR_BIT(PORT_C,PIN_NUM);
    1bb4:	a5 e3       	ldi	r26, 0x35	; 53
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e5 e3       	ldi	r30, 0x35	; 53
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_PULL_RES+0x17a>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_PULL_RES+0x176>
    1bd6:	80 95       	com	r24
    1bd8:	84 23       	and	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	2e c0       	rjmp	.+92     	; 0x1c3a <DIO_PULL_RES+0x1e2>
	  break;
	case Port_D:
	  if(Pull == PULL_UP)
    1bde:	8c 81       	ldd	r24, Y+4	; 0x04
    1be0:	88 23       	and	r24, r24
    1be2:	a1 f4       	brne	.+40     	; 0x1c0c <DIO_PULL_RES+0x1b4>
		SET_BIT(PORT_D,PIN_NUM);
    1be4:	a2 e3       	ldi	r26, 0x32	; 50
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e2 e3       	ldi	r30, 0x32	; 50
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	48 2f       	mov	r20, r24
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	02 2e       	mov	r0, r18
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <DIO_PULL_RES+0x1aa>
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	0a 94       	dec	r0
    1c04:	e2 f7       	brpl	.-8      	; 0x1bfe <DIO_PULL_RES+0x1a6>
    1c06:	84 2b       	or	r24, r20
    1c08:	8c 93       	st	X, r24
    1c0a:	17 c0       	rjmp	.+46     	; 0x1c3a <DIO_PULL_RES+0x1e2>
		else if(Pull == PULL_DOWEN)
    1c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0e:	81 30       	cpi	r24, 0x01	; 1
    1c10:	a1 f4       	brne	.+40     	; 0x1c3a <DIO_PULL_RES+0x1e2>
		CLR_BIT(PORT_D,PIN_NUM);
    1c12:	a2 e3       	ldi	r26, 0x32	; 50
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e2 e3       	ldi	r30, 0x32	; 50
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <DIO_PULL_RES+0x1d8>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <DIO_PULL_RES+0x1d4>
    1c34:	80 95       	com	r24
    1c36:	84 23       	and	r24, r20
    1c38:	8c 93       	st	X, r24
	  break;
	}
}
    1c3a:	26 96       	adiw	r28, 0x06	; 6
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <DIO_SetPortValue>:

void DIO_SetPortValue (PORT_Type  Port,u8 u8PortVal)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <DIO_SetPortValue+0x6>
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <DIO_SetPortValue+0x8>
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	89 83       	std	Y+1, r24	; 0x01
    1c5a:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (Port)
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	3c 83       	std	Y+4, r19	; 0x04
    1c64:	2b 83       	std	Y+3, r18	; 0x03
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	d1 f0       	breq	.+52     	; 0x1ca4 <DIO_SetPortValue+0x58>
    1c70:	2b 81       	ldd	r18, Y+3	; 0x03
    1c72:	3c 81       	ldd	r19, Y+4	; 0x04
    1c74:	22 30       	cpi	r18, 0x02	; 2
    1c76:	31 05       	cpc	r19, r1
    1c78:	2c f4       	brge	.+10     	; 0x1c84 <DIO_SetPortValue+0x38>
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	61 f0       	breq	.+24     	; 0x1c9a <DIO_SetPortValue+0x4e>
    1c82:	1e c0       	rjmp	.+60     	; 0x1cc0 <DIO_SetPortValue+0x74>
    1c84:	2b 81       	ldd	r18, Y+3	; 0x03
    1c86:	3c 81       	ldd	r19, Y+4	; 0x04
    1c88:	22 30       	cpi	r18, 0x02	; 2
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	81 f0       	breq	.+32     	; 0x1cae <DIO_SetPortValue+0x62>
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	83 30       	cpi	r24, 0x03	; 3
    1c94:	91 05       	cpc	r25, r1
    1c96:	81 f0       	breq	.+32     	; 0x1cb8 <DIO_SetPortValue+0x6c>
    1c98:	13 c0       	rjmp	.+38     	; 0x1cc0 <DIO_SetPortValue+0x74>
	{
		case     Port_A:
			PORT_A = u8PortVal;
    1c9a:	eb e3       	ldi	r30, 0x3B	; 59
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	80 83       	st	Z, r24
    1ca2:	0e c0       	rjmp	.+28     	; 0x1cc0 <DIO_SetPortValue+0x74>
			break;
		case Port_B:
			PORT_B = u8PortVal;
    1ca4:	e8 e3       	ldi	r30, 0x38	; 56
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	80 83       	st	Z, r24
    1cac:	09 c0       	rjmp	.+18     	; 0x1cc0 <DIO_SetPortValue+0x74>
			break;
		case Port_C:
			PORT_C = u8PortVal;
    1cae:	e5 e3       	ldi	r30, 0x35	; 53
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	80 83       	st	Z, r24
    1cb6:	04 c0       	rjmp	.+8      	; 0x1cc0 <DIO_SetPortValue+0x74>
			break;
		case  Port_D:
			PORT_D = u8PortVal;
    1cb8:	e2 e3       	ldi	r30, 0x32	; 50
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	80 83       	st	Z, r24
			break;
		default:
			/* Wrong Port ID */
			break;
	}
}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <ADC_INIT>:
 *  Created on: Aug 4, 2023
 *      Author: shim
 */
#include "ADC.h"

void ADC_INIT(void){
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
CLR_BIT(ADMUX,ADLAR);
    1cd6:	a7 e2       	ldi	r26, 0x27	; 39
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e7 e2       	ldi	r30, 0x27	; 39
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	8f 7d       	andi	r24, 0xDF	; 223
    1ce2:	8c 93       	st	X, r24
#elif ADC_Prescaler==ADC_Prescaler_128
SET_BIT(ADCSRA,ADPS0);
SET_BIT(ADCSRA,ADPS2);
SET_BIT(ADCSRA,ADPS3);
#endif
SET_BIT(ADCSRA,ADEN);
    1ce4:	a6 e2       	ldi	r26, 0x26	; 38
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e6 e2       	ldi	r30, 0x26	; 38
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	80 68       	ori	r24, 0x80	; 128
    1cf0:	8c 93       	st	X, r24
}
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <ADC_StartConversion>:

void ADC_StartConversion(u8 channel) {
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <ADC_StartConversion+0x6>
    1cfe:	0f 92       	push	r0
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	89 83       	std	Y+1, r24	; 0x01
	  SET_BIT(ADMUX,MUX0);
    1d06:	a7 e2       	ldi	r26, 0x27	; 39
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e7 e2       	ldi	r30, 0x27	; 39
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	81 60       	ori	r24, 0x01	; 1
    1d12:	8c 93       	st	X, r24
	  CLR_BIT(ADMUX,MUX1);
    1d14:	a7 e2       	ldi	r26, 0x27	; 39
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e7 e2       	ldi	r30, 0x27	; 39
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	8d 7f       	andi	r24, 0xFD	; 253
    1d20:	8c 93       	st	X, r24
	  CLR_BIT(ADMUX,MUX2);
    1d22:	a7 e2       	ldi	r26, 0x27	; 39
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e7 e2       	ldi	r30, 0x27	; 39
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	8b 7f       	andi	r24, 0xFB	; 251
    1d2e:	8c 93       	st	X, r24
	switch(channel)
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	3b 83       	std	Y+3, r19	; 0x03
    1d38:	2a 83       	std	Y+2, r18	; 0x02
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3e:	81 30       	cpi	r24, 0x01	; 1
    1d40:	91 05       	cpc	r25, r1
    1d42:	21 f1       	breq	.+72     	; 0x1d8c <ADC_StartConversion+0x94>
    1d44:	2a 81       	ldd	r18, Y+2	; 0x02
    1d46:	3b 81       	ldd	r19, Y+3	; 0x03
    1d48:	22 30       	cpi	r18, 0x02	; 2
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	2c f4       	brge	.+10     	; 0x1d58 <ADC_StartConversion+0x60>
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	9b 81       	ldd	r25, Y+3	; 0x03
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	61 f0       	breq	.+24     	; 0x1d6e <ADC_StartConversion+0x76>
    1d56:	46 c0       	rjmp	.+140    	; 0x1de4 <ADC_StartConversion+0xec>
    1d58:	2a 81       	ldd	r18, Y+2	; 0x02
    1d5a:	3b 81       	ldd	r19, Y+3	; 0x03
    1d5c:	22 30       	cpi	r18, 0x02	; 2
    1d5e:	31 05       	cpc	r19, r1
    1d60:	21 f1       	breq	.+72     	; 0x1daa <ADC_StartConversion+0xb2>
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	9b 81       	ldd	r25, Y+3	; 0x03
    1d66:	83 30       	cpi	r24, 0x03	; 3
    1d68:	91 05       	cpc	r25, r1
    1d6a:	71 f1       	breq	.+92     	; 0x1dc8 <ADC_StartConversion+0xd0>
    1d6c:	3b c0       	rjmp	.+118    	; 0x1de4 <ADC_StartConversion+0xec>
	{
	case Internal_Vref_turnedoff:
		CLR_BIT(ADMUX,REFS0);
    1d6e:	a7 e2       	ldi	r26, 0x27	; 39
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e7 e2       	ldi	r30, 0x27	; 39
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	8f 7b       	andi	r24, 0xBF	; 191
    1d7a:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,REFS1);
    1d7c:	a6 e2       	ldi	r26, 0x26	; 38
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e6 e2       	ldi	r30, 0x26	; 38
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8f 77       	andi	r24, 0x7F	; 127
    1d88:	8c 93       	st	X, r24
    1d8a:	2c c0       	rjmp	.+88     	; 0x1de4 <ADC_StartConversion+0xec>
		break;
	case external_capacitor:
		SET_BIT(ADMUX,REFS0);
    1d8c:	a7 e2       	ldi	r26, 0x27	; 39
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e7 e2       	ldi	r30, 0x27	; 39
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	80 64       	ori	r24, 0x40	; 64
    1d98:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,REFS1);
    1d9a:	a6 e2       	ldi	r26, 0x26	; 38
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e6 e2       	ldi	r30, 0x26	; 38
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	8f 77       	andi	r24, 0x7F	; 127
    1da6:	8c 93       	st	X, r24
    1da8:	1d c0       	rjmp	.+58     	; 0x1de4 <ADC_StartConversion+0xec>
		break;
	case Reserved:
		CLR_BIT(ADMUX,REFS0);
    1daa:	a7 e2       	ldi	r26, 0x27	; 39
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e7 e2       	ldi	r30, 0x27	; 39
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	8f 7b       	andi	r24, 0xBF	; 191
    1db6:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,REFS1);
    1db8:	a6 e2       	ldi	r26, 0x26	; 38
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e6 e2       	ldi	r30, 0x26	; 38
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	80 68       	ori	r24, 0x80	; 128
    1dc4:	8c 93       	st	X, r24
    1dc6:	0e c0       	rjmp	.+28     	; 0x1de4 <ADC_StartConversion+0xec>
		break;
	case Internal_Voltage_Reference:
		SET_BIT(ADMUX,REFS0);
    1dc8:	a7 e2       	ldi	r26, 0x27	; 39
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e7 e2       	ldi	r30, 0x27	; 39
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	80 64       	ori	r24, 0x40	; 64
    1dd4:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,REFS1);
    1dd6:	a6 e2       	ldi	r26, 0x26	; 38
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e6 e2       	ldi	r30, 0x26	; 38
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	80 68       	ori	r24, 0x80	; 128
    1de2:	8c 93       	st	X, r24
		break;
	}

   SET_BIT(ADCSRA,ADSC);
    1de4:	a6 e2       	ldi	r26, 0x26	; 38
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e6 e2       	ldi	r30, 0x26	; 38
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	80 64       	ori	r24, 0x40	; 64
    1df0:	8c 93       	st	X, r24
}
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <ADC_Read>:
u16 ADC_Read (u8 channel)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	0f 92       	push	r0
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(ADCSRA,ADIF));
    1e0a:	e6 e2       	ldi	r30, 0x26	; 38
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	82 95       	swap	r24
    1e12:	8f 70       	andi	r24, 0x0F	; 15
    1e14:	88 2f       	mov	r24, r24
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	81 70       	andi	r24, 0x01	; 1
    1e1a:	90 70       	andi	r25, 0x00	; 0
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	a9 f3       	breq	.-22     	; 0x1e0a <ADC_Read+0xc>
	//ADC Flag Clear
	SET_BIT(ADCSRA,ADIF);
    1e20:	a6 e2       	ldi	r26, 0x26	; 38
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e6 e2       	ldi	r30, 0x26	; 38
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	80 61       	ori	r24, 0x10	; 16
    1e2c:	8c 93       	st	X, r24
	return ADC;
    1e2e:	e4 e2       	ldi	r30, 0x24	; 36
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	91 81       	ldd	r25, Z+1	; 0x01
}
    1e36:	0f 90       	pop	r0
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <Enable_ADCInterrupt>:

void Enable_ADCInterrupt(void){
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
	 SET_BIT(ADCSRA,ADIE);
    1e46:	a6 e2       	ldi	r26, 0x26	; 38
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e6 e2       	ldi	r30, 0x26	; 38
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	88 60       	ori	r24, 0x08	; 8
    1e52:	8c 93       	st	X, r24
	// sei();
}
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <priwriteHalfPort>:
#include <util/delay.h>
const unsigned char lineAddresses[] = {0x00, 0x40, 0x14, 0x54};

/*-----------------------private functions--------------*/

static void priwriteHalfPort(u8 value){
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	0f 92       	push	r0
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(LCD_D4,GET_BIT(value,0));
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	98 2f       	mov	r25, r24
    1e6a:	91 70       	andi	r25, 0x01	; 1
    1e6c:	88 e0       	ldi	r24, 0x08	; 8
    1e6e:	69 2f       	mov	r22, r25
    1e70:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D5,GET_BIT(value,1));
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	86 95       	lsr	r24
    1e78:	98 2f       	mov	r25, r24
    1e7a:	91 70       	andi	r25, 0x01	; 1
    1e7c:	89 e0       	ldi	r24, 0x09	; 9
    1e7e:	69 2f       	mov	r22, r25
    1e80:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D6,GET_BIT(value,2));
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	86 95       	lsr	r24
    1e88:	86 95       	lsr	r24
    1e8a:	98 2f       	mov	r25, r24
    1e8c:	91 70       	andi	r25, 0x01	; 1
    1e8e:	8a e0       	ldi	r24, 0x0A	; 10
    1e90:	69 2f       	mov	r22, r25
    1e92:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D7,GET_BIT(value,3));
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	86 95       	lsr	r24
    1e9a:	86 95       	lsr	r24
    1e9c:	86 95       	lsr	r24
    1e9e:	98 2f       	mov	r25, r24
    1ea0:	91 70       	andi	r25, 0x01	; 1
    1ea2:	8c e0       	ldi	r24, 0x0C	; 12
    1ea4:	69 2f       	mov	r22, r25
    1ea6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
}
    1eaa:	0f 90       	pop	r0
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <Enable>:

static void Enable()
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	2e 97       	sbiw	r28, 0x0e	; 14
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
	Dio_WriteChannel(LCD_EN,HIGH);
    1ec6:	82 e0       	ldi	r24, 0x02	; 2
    1ec8:	61 e0       	ldi	r22, 0x01	; 1
    1eca:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	a0 e8       	ldi	r26, 0x80	; 128
    1ed4:	bf e3       	ldi	r27, 0x3F	; 63
    1ed6:	8b 87       	std	Y+11, r24	; 0x0b
    1ed8:	9c 87       	std	Y+12, r25	; 0x0c
    1eda:	ad 87       	std	Y+13, r26	; 0x0d
    1edc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ede:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	4a ef       	ldi	r20, 0xFA	; 250
    1eec:	54 e4       	ldi	r21, 0x44	; 68
    1eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	8f 83       	std	Y+7, r24	; 0x07
    1ef8:	98 87       	std	Y+8, r25	; 0x08
    1efa:	a9 87       	std	Y+9, r26	; 0x09
    1efc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1efe:	6f 81       	ldd	r22, Y+7	; 0x07
    1f00:	78 85       	ldd	r23, Y+8	; 0x08
    1f02:	89 85       	ldd	r24, Y+9	; 0x09
    1f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e8       	ldi	r20, 0x80	; 128
    1f0c:	5f e3       	ldi	r21, 0x3F	; 63
    1f0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f12:	88 23       	and	r24, r24
    1f14:	2c f4       	brge	.+10     	; 0x1f20 <Enable+0x6e>
		__ticks = 1;
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	9e 83       	std	Y+6, r25	; 0x06
    1f1c:	8d 83       	std	Y+5, r24	; 0x05
    1f1e:	3f c0       	rjmp	.+126    	; 0x1f9e <Enable+0xec>
	else if (__tmp > 65535)
    1f20:	6f 81       	ldd	r22, Y+7	; 0x07
    1f22:	78 85       	ldd	r23, Y+8	; 0x08
    1f24:	89 85       	ldd	r24, Y+9	; 0x09
    1f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	3f ef       	ldi	r19, 0xFF	; 255
    1f2c:	4f e7       	ldi	r20, 0x7F	; 127
    1f2e:	57 e4       	ldi	r21, 0x47	; 71
    1f30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f34:	18 16       	cp	r1, r24
    1f36:	4c f5       	brge	.+82     	; 0x1f8a <Enable+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e2       	ldi	r20, 0x20	; 32
    1f46:	51 e4       	ldi	r21, 0x41	; 65
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	9e 83       	std	Y+6, r25	; 0x06
    1f5e:	8d 83       	std	Y+5, r24	; 0x05
    1f60:	0f c0       	rjmp	.+30     	; 0x1f80 <Enable+0xce>
    1f62:	88 ec       	ldi	r24, 0xC8	; 200
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	9c 83       	std	Y+4, r25	; 0x04
    1f68:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <Enable+0xbc>
    1f72:	9c 83       	std	Y+4, r25	; 0x04
    1f74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f76:	8d 81       	ldd	r24, Y+5	; 0x05
    1f78:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	9e 83       	std	Y+6, r25	; 0x06
    1f7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f80:	8d 81       	ldd	r24, Y+5	; 0x05
    1f82:	9e 81       	ldd	r25, Y+6	; 0x06
    1f84:	00 97       	sbiw	r24, 0x00	; 0
    1f86:	69 f7       	brne	.-38     	; 0x1f62 <Enable+0xb0>
    1f88:	14 c0       	rjmp	.+40     	; 0x1fb2 <Enable+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8c:	78 85       	ldd	r23, Y+8	; 0x08
    1f8e:	89 85       	ldd	r24, Y+9	; 0x09
    1f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	9e 83       	std	Y+6, r25	; 0x06
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa2:	9a 83       	std	Y+2, r25	; 0x02
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	f1 f7       	brne	.-4      	; 0x1faa <Enable+0xf8>
    1fae:	9a 83       	std	Y+2, r25	; 0x02
    1fb0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	Dio_WriteChannel(LCD_EN,LOW);
    1fb2:	82 e0       	ldi	r24, 0x02	; 2
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
}
    1fba:	2e 96       	adiw	r28, 0x0e	; 14
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <LCD_Init>:
/*********************************************************************************************/


/*------------------------APIs Functions-----------------------------*/

void LCD_Init(void){
    1fcc:	0f 93       	push	r16
    1fce:	1f 93       	push	r17
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	cc 54       	subi	r28, 0x4C	; 76
    1fda:	d0 40       	sbci	r29, 0x00	; 0
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	e7 5b       	subi	r30, 0xB7	; 183
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	ac e0       	ldi	r26, 0x0C	; 12
    1ff2:	b2 e4       	ldi	r27, 0x42	; 66
    1ff4:	80 83       	st	Z, r24
    1ff6:	91 83       	std	Z+1, r25	; 0x01
    1ff8:	a2 83       	std	Z+2, r26	; 0x02
    1ffa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffc:	8e 01       	movw	r16, r28
    1ffe:	0b 5b       	subi	r16, 0xBB	; 187
    2000:	1f 4f       	sbci	r17, 0xFF	; 255
    2002:	fe 01       	movw	r30, r28
    2004:	e7 5b       	subi	r30, 0xB7	; 183
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	60 81       	ld	r22, Z
    200a:	71 81       	ldd	r23, Z+1	; 0x01
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	4a ef       	ldi	r20, 0xFA	; 250
    2016:	54 e4       	ldi	r21, 0x44	; 68
    2018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	f8 01       	movw	r30, r16
    2022:	80 83       	st	Z, r24
    2024:	91 83       	std	Z+1, r25	; 0x01
    2026:	a2 83       	std	Z+2, r26	; 0x02
    2028:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    202a:	fe 01       	movw	r30, r28
    202c:	eb 5b       	subi	r30, 0xBB	; 187
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	60 81       	ld	r22, Z
    2032:	71 81       	ldd	r23, Z+1	; 0x01
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e8       	ldi	r20, 0x80	; 128
    203e:	5f e3       	ldi	r21, 0x3F	; 63
    2040:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2044:	88 23       	and	r24, r24
    2046:	44 f4       	brge	.+16     	; 0x2058 <LCD_Init+0x8c>
		__ticks = 1;
    2048:	fe 01       	movw	r30, r28
    204a:	ed 5b       	subi	r30, 0xBD	; 189
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	91 83       	std	Z+1, r25	; 0x01
    2054:	80 83       	st	Z, r24
    2056:	64 c0       	rjmp	.+200    	; 0x2120 <LCD_Init+0x154>
	else if (__tmp > 65535)
    2058:	fe 01       	movw	r30, r28
    205a:	eb 5b       	subi	r30, 0xBB	; 187
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	60 81       	ld	r22, Z
    2060:	71 81       	ldd	r23, Z+1	; 0x01
    2062:	82 81       	ldd	r24, Z+2	; 0x02
    2064:	93 81       	ldd	r25, Z+3	; 0x03
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	3f ef       	ldi	r19, 0xFF	; 255
    206a:	4f e7       	ldi	r20, 0x7F	; 127
    206c:	57 e4       	ldi	r21, 0x47	; 71
    206e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2072:	18 16       	cp	r1, r24
    2074:	0c f0       	brlt	.+2      	; 0x2078 <LCD_Init+0xac>
    2076:	43 c0       	rjmp	.+134    	; 0x20fe <LCD_Init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2078:	fe 01       	movw	r30, r28
    207a:	e7 5b       	subi	r30, 0xB7	; 183
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	60 81       	ld	r22, Z
    2080:	71 81       	ldd	r23, Z+1	; 0x01
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	93 81       	ldd	r25, Z+3	; 0x03
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e2       	ldi	r20, 0x20	; 32
    208c:	51 e4       	ldi	r21, 0x41	; 65
    208e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	8e 01       	movw	r16, r28
    2098:	0d 5b       	subi	r16, 0xBD	; 189
    209a:	1f 4f       	sbci	r17, 0xFF	; 255
    209c:	bc 01       	movw	r22, r24
    209e:	cd 01       	movw	r24, r26
    20a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	f8 01       	movw	r30, r16
    20aa:	91 83       	std	Z+1, r25	; 0x01
    20ac:	80 83       	st	Z, r24
    20ae:	1f c0       	rjmp	.+62     	; 0x20ee <LCD_Init+0x122>
    20b0:	fe 01       	movw	r30, r28
    20b2:	ef 5b       	subi	r30, 0xBF	; 191
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	88 ec       	ldi	r24, 0xC8	; 200
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	91 83       	std	Z+1, r25	; 0x01
    20bc:	80 83       	st	Z, r24
    20be:	fe 01       	movw	r30, r28
    20c0:	ef 5b       	subi	r30, 0xBF	; 191
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <LCD_Init+0xfc>
    20cc:	fe 01       	movw	r30, r28
    20ce:	ef 5b       	subi	r30, 0xBF	; 191
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	91 83       	std	Z+1, r25	; 0x01
    20d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d6:	de 01       	movw	r26, r28
    20d8:	ad 5b       	subi	r26, 0xBD	; 189
    20da:	bf 4f       	sbci	r27, 0xFF	; 255
    20dc:	fe 01       	movw	r30, r28
    20de:	ed 5b       	subi	r30, 0xBD	; 189
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	80 81       	ld	r24, Z
    20e4:	91 81       	ldd	r25, Z+1	; 0x01
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	11 96       	adiw	r26, 0x01	; 1
    20ea:	9c 93       	st	X, r25
    20ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ee:	fe 01       	movw	r30, r28
    20f0:	ed 5b       	subi	r30, 0xBD	; 189
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	91 81       	ldd	r25, Z+1	; 0x01
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	d1 f6       	brne	.-76     	; 0x20b0 <LCD_Init+0xe4>
    20fc:	24 c0       	rjmp	.+72     	; 0x2146 <LCD_Init+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fe:	8e 01       	movw	r16, r28
    2100:	0d 5b       	subi	r16, 0xBD	; 189
    2102:	1f 4f       	sbci	r17, 0xFF	; 255
    2104:	fe 01       	movw	r30, r28
    2106:	eb 5b       	subi	r30, 0xBB	; 187
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	60 81       	ld	r22, Z
    210c:	71 81       	ldd	r23, Z+1	; 0x01
    210e:	82 81       	ldd	r24, Z+2	; 0x02
    2110:	93 81       	ldd	r25, Z+3	; 0x03
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	f8 01       	movw	r30, r16
    211c:	91 83       	std	Z+1, r25	; 0x01
    211e:	80 83       	st	Z, r24
    2120:	fe 01       	movw	r30, r28
    2122:	ed 5b       	subi	r30, 0xBD	; 189
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 81       	ld	r24, Z
    2128:	91 81       	ldd	r25, Z+1	; 0x01
    212a:	fe 01       	movw	r30, r28
    212c:	ff 96       	adiw	r30, 0x3f	; 63
    212e:	91 83       	std	Z+1, r25	; 0x01
    2130:	80 83       	st	Z, r24
    2132:	fe 01       	movw	r30, r28
    2134:	ff 96       	adiw	r30, 0x3f	; 63
    2136:	80 81       	ld	r24, Z
    2138:	91 81       	ldd	r25, Z+1	; 0x01
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <LCD_Init+0x16e>
    213e:	fe 01       	movw	r30, r28
    2140:	ff 96       	adiw	r30, 0x3f	; 63
    2142:	91 83       	std	Z+1, r25	; 0x01
    2144:	80 83       	st	Z, r24
#if(LCD_Mode==four_mode)
	{

	//init lcd as data sheet
	_delay_ms(35);
	Dio_WriteChannel(LCD_RS,LOW);
    2146:	83 e0       	ldi	r24, 0x03	; 3
    2148:	60 e0       	ldi	r22, 0x00	; 0
    214a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
	priwriteHalfPort(0b0010);
    214e:	82 e0       	ldi	r24, 0x02	; 2
    2150:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <priwriteHalfPort>
	Enable();
    2154:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <Enable>
	LCD_SendCommand(0b00101000);
    2158:	88 e2       	ldi	r24, 0x28	; 40
    215a:	0e 94 b2 12 	call	0x2564	; 0x2564 <LCD_SendCommand>
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	a4 e3       	ldi	r26, 0x34	; 52
    2164:	b2 e4       	ldi	r27, 0x42	; 66
    2166:	8b af       	std	Y+59, r24	; 0x3b
    2168:	9c af       	std	Y+60, r25	; 0x3c
    216a:	ad af       	std	Y+61, r26	; 0x3d
    216c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    216e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2170:	7c ad       	ldd	r23, Y+60	; 0x3c
    2172:	8d ad       	ldd	r24, Y+61	; 0x3d
    2174:	9e ad       	ldd	r25, Y+62	; 0x3e
    2176:	2b ea       	ldi	r18, 0xAB	; 171
    2178:	3a ea       	ldi	r19, 0xAA	; 170
    217a:	4a e2       	ldi	r20, 0x2A	; 42
    217c:	50 e4       	ldi	r21, 0x40	; 64
    217e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	8f ab       	std	Y+55, r24	; 0x37
    2188:	98 af       	std	Y+56, r25	; 0x38
    218a:	a9 af       	std	Y+57, r26	; 0x39
    218c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    218e:	6f a9       	ldd	r22, Y+55	; 0x37
    2190:	78 ad       	ldd	r23, Y+56	; 0x38
    2192:	89 ad       	ldd	r24, Y+57	; 0x39
    2194:	9a ad       	ldd	r25, Y+58	; 0x3a
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e8       	ldi	r20, 0x80	; 128
    219c:	5f e3       	ldi	r21, 0x3F	; 63
    219e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a2:	88 23       	and	r24, r24
    21a4:	1c f4       	brge	.+6      	; 0x21ac <LCD_Init+0x1e0>
		__ticks = 1;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	8e ab       	std	Y+54, r24	; 0x36
    21aa:	91 c0       	rjmp	.+290    	; 0x22ce <LCD_Init+0x302>
	else if (__tmp > 255)
    21ac:	6f a9       	ldd	r22, Y+55	; 0x37
    21ae:	78 ad       	ldd	r23, Y+56	; 0x38
    21b0:	89 ad       	ldd	r24, Y+57	; 0x39
    21b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	4f e7       	ldi	r20, 0x7F	; 127
    21ba:	53 e4       	ldi	r21, 0x43	; 67
    21bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21c0:	18 16       	cp	r1, r24
    21c2:	0c f0       	brlt	.+2      	; 0x21c6 <LCD_Init+0x1fa>
    21c4:	7b c0       	rjmp	.+246    	; 0x22bc <LCD_Init+0x2f0>
	{
		_delay_ms(__us / 1000.0);
    21c6:	6b ad       	ldd	r22, Y+59	; 0x3b
    21c8:	7c ad       	ldd	r23, Y+60	; 0x3c
    21ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    21cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	4a e7       	ldi	r20, 0x7A	; 122
    21d4:	54 e4       	ldi	r21, 0x44	; 68
    21d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	8a ab       	std	Y+50, r24	; 0x32
    21e0:	9b ab       	std	Y+51, r25	; 0x33
    21e2:	ac ab       	std	Y+52, r26	; 0x34
    21e4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e6:	6a a9       	ldd	r22, Y+50	; 0x32
    21e8:	7b a9       	ldd	r23, Y+51	; 0x33
    21ea:	8c a9       	ldd	r24, Y+52	; 0x34
    21ec:	9d a9       	ldd	r25, Y+53	; 0x35
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	4a ef       	ldi	r20, 0xFA	; 250
    21f4:	54 e4       	ldi	r21, 0x44	; 68
    21f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	8e a7       	std	Y+46, r24	; 0x2e
    2200:	9f a7       	std	Y+47, r25	; 0x2f
    2202:	a8 ab       	std	Y+48, r26	; 0x30
    2204:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2206:	6e a5       	ldd	r22, Y+46	; 0x2e
    2208:	7f a5       	ldd	r23, Y+47	; 0x2f
    220a:	88 a9       	ldd	r24, Y+48	; 0x30
    220c:	99 a9       	ldd	r25, Y+49	; 0x31
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e8       	ldi	r20, 0x80	; 128
    2214:	5f e3       	ldi	r21, 0x3F	; 63
    2216:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    221a:	88 23       	and	r24, r24
    221c:	2c f4       	brge	.+10     	; 0x2228 <LCD_Init+0x25c>
		__ticks = 1;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9d a7       	std	Y+45, r25	; 0x2d
    2224:	8c a7       	std	Y+44, r24	; 0x2c
    2226:	3f c0       	rjmp	.+126    	; 0x22a6 <LCD_Init+0x2da>
	else if (__tmp > 65535)
    2228:	6e a5       	ldd	r22, Y+46	; 0x2e
    222a:	7f a5       	ldd	r23, Y+47	; 0x2f
    222c:	88 a9       	ldd	r24, Y+48	; 0x30
    222e:	99 a9       	ldd	r25, Y+49	; 0x31
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	3f ef       	ldi	r19, 0xFF	; 255
    2234:	4f e7       	ldi	r20, 0x7F	; 127
    2236:	57 e4       	ldi	r21, 0x47	; 71
    2238:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    223c:	18 16       	cp	r1, r24
    223e:	4c f5       	brge	.+82     	; 0x2292 <LCD_Init+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2240:	6a a9       	ldd	r22, Y+50	; 0x32
    2242:	7b a9       	ldd	r23, Y+51	; 0x33
    2244:	8c a9       	ldd	r24, Y+52	; 0x34
    2246:	9d a9       	ldd	r25, Y+53	; 0x35
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e2       	ldi	r20, 0x20	; 32
    224e:	51 e4       	ldi	r21, 0x41	; 65
    2250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	bc 01       	movw	r22, r24
    225a:	cd 01       	movw	r24, r26
    225c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	9d a7       	std	Y+45, r25	; 0x2d
    2266:	8c a7       	std	Y+44, r24	; 0x2c
    2268:	0f c0       	rjmp	.+30     	; 0x2288 <LCD_Init+0x2bc>
    226a:	88 ec       	ldi	r24, 0xC8	; 200
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	9b a7       	std	Y+43, r25	; 0x2b
    2270:	8a a7       	std	Y+42, r24	; 0x2a
    2272:	8a a5       	ldd	r24, Y+42	; 0x2a
    2274:	9b a5       	ldd	r25, Y+43	; 0x2b
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <LCD_Init+0x2aa>
    227a:	9b a7       	std	Y+43, r25	; 0x2b
    227c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2280:	9d a5       	ldd	r25, Y+45	; 0x2d
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	9d a7       	std	Y+45, r25	; 0x2d
    2286:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2288:	8c a5       	ldd	r24, Y+44	; 0x2c
    228a:	9d a5       	ldd	r25, Y+45	; 0x2d
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	69 f7       	brne	.-38     	; 0x226a <LCD_Init+0x29e>
    2290:	24 c0       	rjmp	.+72     	; 0x22da <LCD_Init+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2292:	6e a5       	ldd	r22, Y+46	; 0x2e
    2294:	7f a5       	ldd	r23, Y+47	; 0x2f
    2296:	88 a9       	ldd	r24, Y+48	; 0x30
    2298:	99 a9       	ldd	r25, Y+49	; 0x31
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9d a7       	std	Y+45, r25	; 0x2d
    22a4:	8c a7       	std	Y+44, r24	; 0x2c
    22a6:	8c a5       	ldd	r24, Y+44	; 0x2c
    22a8:	9d a5       	ldd	r25, Y+45	; 0x2d
    22aa:	99 a7       	std	Y+41, r25	; 0x29
    22ac:	88 a7       	std	Y+40, r24	; 0x28
    22ae:	88 a5       	ldd	r24, Y+40	; 0x28
    22b0:	99 a5       	ldd	r25, Y+41	; 0x29
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <LCD_Init+0x2e6>
    22b6:	99 a7       	std	Y+41, r25	; 0x29
    22b8:	88 a7       	std	Y+40, r24	; 0x28
    22ba:	0f c0       	rjmp	.+30     	; 0x22da <LCD_Init+0x30e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22bc:	6f a9       	ldd	r22, Y+55	; 0x37
    22be:	78 ad       	ldd	r23, Y+56	; 0x38
    22c0:	89 ad       	ldd	r24, Y+57	; 0x39
    22c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	8e ab       	std	Y+54, r24	; 0x36
    22ce:	8e a9       	ldd	r24, Y+54	; 0x36
    22d0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22d2:	8f a1       	ldd	r24, Y+39	; 0x27
    22d4:	8a 95       	dec	r24
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <LCD_Init+0x308>
    22d8:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(45);
	/*display on cursor on*/
	LCD_SendCommand(0x0C);
    22da:	8c e0       	ldi	r24, 0x0C	; 12
    22dc:	0e 94 b2 12 	call	0x2564	; 0x2564 <LCD_SendCommand>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	a4 e3       	ldi	r26, 0x34	; 52
    22e6:	b2 e4       	ldi	r27, 0x42	; 66
    22e8:	8b a3       	std	Y+35, r24	; 0x23
    22ea:	9c a3       	std	Y+36, r25	; 0x24
    22ec:	ad a3       	std	Y+37, r26	; 0x25
    22ee:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22f0:	6b a1       	ldd	r22, Y+35	; 0x23
    22f2:	7c a1       	ldd	r23, Y+36	; 0x24
    22f4:	8d a1       	ldd	r24, Y+37	; 0x25
    22f6:	9e a1       	ldd	r25, Y+38	; 0x26
    22f8:	2b ea       	ldi	r18, 0xAB	; 171
    22fa:	3a ea       	ldi	r19, 0xAA	; 170
    22fc:	4a e2       	ldi	r20, 0x2A	; 42
    22fe:	50 e4       	ldi	r21, 0x40	; 64
    2300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	8f 8f       	std	Y+31, r24	; 0x1f
    230a:	98 a3       	std	Y+32, r25	; 0x20
    230c:	a9 a3       	std	Y+33, r26	; 0x21
    230e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2310:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2312:	78 a1       	ldd	r23, Y+32	; 0x20
    2314:	89 a1       	ldd	r24, Y+33	; 0x21
    2316:	9a a1       	ldd	r25, Y+34	; 0x22
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e8       	ldi	r20, 0x80	; 128
    231e:	5f e3       	ldi	r21, 0x3F	; 63
    2320:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2324:	88 23       	and	r24, r24
    2326:	1c f4       	brge	.+6      	; 0x232e <LCD_Init+0x362>
		__ticks = 1;
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	8e 8f       	std	Y+30, r24	; 0x1e
    232c:	91 c0       	rjmp	.+290    	; 0x2450 <LCD_Init+0x484>
	else if (__tmp > 255)
    232e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2330:	78 a1       	ldd	r23, Y+32	; 0x20
    2332:	89 a1       	ldd	r24, Y+33	; 0x21
    2334:	9a a1       	ldd	r25, Y+34	; 0x22
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	4f e7       	ldi	r20, 0x7F	; 127
    233c:	53 e4       	ldi	r21, 0x43	; 67
    233e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2342:	18 16       	cp	r1, r24
    2344:	0c f0       	brlt	.+2      	; 0x2348 <LCD_Init+0x37c>
    2346:	7b c0       	rjmp	.+246    	; 0x243e <LCD_Init+0x472>
	{
		_delay_ms(__us / 1000.0);
    2348:	6b a1       	ldd	r22, Y+35	; 0x23
    234a:	7c a1       	ldd	r23, Y+36	; 0x24
    234c:	8d a1       	ldd	r24, Y+37	; 0x25
    234e:	9e a1       	ldd	r25, Y+38	; 0x26
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4a e7       	ldi	r20, 0x7A	; 122
    2356:	54 e4       	ldi	r21, 0x44	; 68
    2358:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	8a 8f       	std	Y+26, r24	; 0x1a
    2362:	9b 8f       	std	Y+27, r25	; 0x1b
    2364:	ac 8f       	std	Y+28, r26	; 0x1c
    2366:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2368:	6a 8d       	ldd	r22, Y+26	; 0x1a
    236a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    236c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    236e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	4a ef       	ldi	r20, 0xFA	; 250
    2376:	54 e4       	ldi	r21, 0x44	; 68
    2378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	8e 8b       	std	Y+22, r24	; 0x16
    2382:	9f 8b       	std	Y+23, r25	; 0x17
    2384:	a8 8f       	std	Y+24, r26	; 0x18
    2386:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2388:	6e 89       	ldd	r22, Y+22	; 0x16
    238a:	7f 89       	ldd	r23, Y+23	; 0x17
    238c:	88 8d       	ldd	r24, Y+24	; 0x18
    238e:	99 8d       	ldd	r25, Y+25	; 0x19
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e8       	ldi	r20, 0x80	; 128
    2396:	5f e3       	ldi	r21, 0x3F	; 63
    2398:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    239c:	88 23       	and	r24, r24
    239e:	2c f4       	brge	.+10     	; 0x23aa <LCD_Init+0x3de>
		__ticks = 1;
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9d 8b       	std	Y+21, r25	; 0x15
    23a6:	8c 8b       	std	Y+20, r24	; 0x14
    23a8:	3f c0       	rjmp	.+126    	; 0x2428 <LCD_Init+0x45c>
	else if (__tmp > 65535)
    23aa:	6e 89       	ldd	r22, Y+22	; 0x16
    23ac:	7f 89       	ldd	r23, Y+23	; 0x17
    23ae:	88 8d       	ldd	r24, Y+24	; 0x18
    23b0:	99 8d       	ldd	r25, Y+25	; 0x19
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	3f ef       	ldi	r19, 0xFF	; 255
    23b6:	4f e7       	ldi	r20, 0x7F	; 127
    23b8:	57 e4       	ldi	r21, 0x47	; 71
    23ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23be:	18 16       	cp	r1, r24
    23c0:	4c f5       	brge	.+82     	; 0x2414 <LCD_Init+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    23c4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    23c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e2       	ldi	r20, 0x20	; 32
    23d0:	51 e4       	ldi	r21, 0x41	; 65
    23d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	9d 8b       	std	Y+21, r25	; 0x15
    23e8:	8c 8b       	std	Y+20, r24	; 0x14
    23ea:	0f c0       	rjmp	.+30     	; 0x240a <LCD_Init+0x43e>
    23ec:	88 ec       	ldi	r24, 0xC8	; 200
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	9b 8b       	std	Y+19, r25	; 0x13
    23f2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23f4:	8a 89       	ldd	r24, Y+18	; 0x12
    23f6:	9b 89       	ldd	r25, Y+19	; 0x13
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <LCD_Init+0x42c>
    23fc:	9b 8b       	std	Y+19, r25	; 0x13
    23fe:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2400:	8c 89       	ldd	r24, Y+20	; 0x14
    2402:	9d 89       	ldd	r25, Y+21	; 0x15
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	9d 8b       	std	Y+21, r25	; 0x15
    2408:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240a:	8c 89       	ldd	r24, Y+20	; 0x14
    240c:	9d 89       	ldd	r25, Y+21	; 0x15
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	69 f7       	brne	.-38     	; 0x23ec <LCD_Init+0x420>
    2412:	24 c0       	rjmp	.+72     	; 0x245c <LCD_Init+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2414:	6e 89       	ldd	r22, Y+22	; 0x16
    2416:	7f 89       	ldd	r23, Y+23	; 0x17
    2418:	88 8d       	ldd	r24, Y+24	; 0x18
    241a:	99 8d       	ldd	r25, Y+25	; 0x19
    241c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	9d 8b       	std	Y+21, r25	; 0x15
    2426:	8c 8b       	std	Y+20, r24	; 0x14
    2428:	8c 89       	ldd	r24, Y+20	; 0x14
    242a:	9d 89       	ldd	r25, Y+21	; 0x15
    242c:	99 8b       	std	Y+17, r25	; 0x11
    242e:	88 8b       	std	Y+16, r24	; 0x10
    2430:	88 89       	ldd	r24, Y+16	; 0x10
    2432:	99 89       	ldd	r25, Y+17	; 0x11
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <LCD_Init+0x468>
    2438:	99 8b       	std	Y+17, r25	; 0x11
    243a:	88 8b       	std	Y+16, r24	; 0x10
    243c:	0f c0       	rjmp	.+30     	; 0x245c <LCD_Init+0x490>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    243e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2440:	78 a1       	ldd	r23, Y+32	; 0x20
    2442:	89 a1       	ldd	r24, Y+33	; 0x21
    2444:	9a a1       	ldd	r25, Y+34	; 0x22
    2446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	8e 8f       	std	Y+30, r24	; 0x1e
    2450:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2452:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2454:	8f 85       	ldd	r24, Y+15	; 0x0f
    2456:	8a 95       	dec	r24
    2458:	f1 f7       	brne	.-4      	; 0x2456 <LCD_Init+0x48a>
    245a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);
	//clear display
	LCD_SendCommand(0b00000001);
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	0e 94 b2 12 	call	0x2564	; 0x2564 <LCD_SendCommand>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a0 e0       	ldi	r26, 0x00	; 0
    2468:	b0 e4       	ldi	r27, 0x40	; 64
    246a:	8b 87       	std	Y+11, r24	; 0x0b
    246c:	9c 87       	std	Y+12, r25	; 0x0c
    246e:	ad 87       	std	Y+13, r26	; 0x0d
    2470:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2472:	6b 85       	ldd	r22, Y+11	; 0x0b
    2474:	7c 85       	ldd	r23, Y+12	; 0x0c
    2476:	8d 85       	ldd	r24, Y+13	; 0x0d
    2478:	9e 85       	ldd	r25, Y+14	; 0x0e
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	4a ef       	ldi	r20, 0xFA	; 250
    2480:	54 e4       	ldi	r21, 0x44	; 68
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	8f 83       	std	Y+7, r24	; 0x07
    248c:	98 87       	std	Y+8, r25	; 0x08
    248e:	a9 87       	std	Y+9, r26	; 0x09
    2490:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2492:	6f 81       	ldd	r22, Y+7	; 0x07
    2494:	78 85       	ldd	r23, Y+8	; 0x08
    2496:	89 85       	ldd	r24, Y+9	; 0x09
    2498:	9a 85       	ldd	r25, Y+10	; 0x0a
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e8       	ldi	r20, 0x80	; 128
    24a0:	5f e3       	ldi	r21, 0x3F	; 63
    24a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a6:	88 23       	and	r24, r24
    24a8:	2c f4       	brge	.+10     	; 0x24b4 <LCD_Init+0x4e8>
		__ticks = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
    24b2:	3f c0       	rjmp	.+126    	; 0x2532 <LCD_Init+0x566>
	else if (__tmp > 65535)
    24b4:	6f 81       	ldd	r22, Y+7	; 0x07
    24b6:	78 85       	ldd	r23, Y+8	; 0x08
    24b8:	89 85       	ldd	r24, Y+9	; 0x09
    24ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	3f ef       	ldi	r19, 0xFF	; 255
    24c0:	4f e7       	ldi	r20, 0x7F	; 127
    24c2:	57 e4       	ldi	r21, 0x47	; 71
    24c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c8:	18 16       	cp	r1, r24
    24ca:	4c f5       	brge	.+82     	; 0x251e <LCD_Init+0x552>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e2       	ldi	r20, 0x20	; 32
    24da:	51 e4       	ldi	r21, 0x41	; 65
    24dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	bc 01       	movw	r22, r24
    24e6:	cd 01       	movw	r24, r26
    24e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	9e 83       	std	Y+6, r25	; 0x06
    24f2:	8d 83       	std	Y+5, r24	; 0x05
    24f4:	0f c0       	rjmp	.+30     	; 0x2514 <LCD_Init+0x548>
    24f6:	88 ec       	ldi	r24, 0xC8	; 200
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	9c 83       	std	Y+4, r25	; 0x04
    24fc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	9c 81       	ldd	r25, Y+4	; 0x04
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <LCD_Init+0x536>
    2506:	9c 83       	std	Y+4, r25	; 0x04
    2508:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250a:	8d 81       	ldd	r24, Y+5	; 0x05
    250c:	9e 81       	ldd	r25, Y+6	; 0x06
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	9e 83       	std	Y+6, r25	; 0x06
    2512:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2514:	8d 81       	ldd	r24, Y+5	; 0x05
    2516:	9e 81       	ldd	r25, Y+6	; 0x06
    2518:	00 97       	sbiw	r24, 0x00	; 0
    251a:	69 f7       	brne	.-38     	; 0x24f6 <LCD_Init+0x52a>
    251c:	14 c0       	rjmp	.+40     	; 0x2546 <LCD_Init+0x57a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251e:	6f 81       	ldd	r22, Y+7	; 0x07
    2520:	78 85       	ldd	r23, Y+8	; 0x08
    2522:	89 85       	ldd	r24, Y+9	; 0x09
    2524:	9a 85       	ldd	r25, Y+10	; 0x0a
    2526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	9e 83       	std	Y+6, r25	; 0x06
    2530:	8d 83       	std	Y+5, r24	; 0x05
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	9e 81       	ldd	r25, Y+6	; 0x06
    2536:	9a 83       	std	Y+2, r25	; 0x02
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	9a 81       	ldd	r25, Y+2	; 0x02
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <LCD_Init+0x572>
    2542:	9a 83       	std	Y+2, r25	; 0x02
    2544:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//Entry Mode
	LCD_SendCommand(0b00000110);
    2546:	86 e0       	ldi	r24, 0x06	; 6
    2548:	0e 94 b2 12 	call	0x2564	; 0x2564 <LCD_SendCommand>
	LCD_SendCommand(00000001);
	_delay_ms(1.53);
	LCD_SendCommand(00000100);
	}
#endif
}
    254c:	c4 5b       	subi	r28, 0xB4	; 180
    254e:	df 4f       	sbci	r29, 0xFF	; 255
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	1f 91       	pop	r17
    2560:	0f 91       	pop	r16
    2562:	08 95       	ret

00002564 <LCD_SendCommand>:

void LCD_SendCommand(u8 u8_copy_command){
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	0f 92       	push	r0
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
    256e:	89 83       	std	Y+1, r24	; 0x01
		priwriteHalfPort(u8_copy_command);

	}
#elif(LCD_Mode==four_mode)
	{	//SET RS PIN AS COMMAND -ACTIVE LOW-
		Dio_WriteChannel(LCD_RS,LOW);
    2570:	83 e0       	ldi	r24, 0x03	; 3
    2572:	60 e0       	ldi	r22, 0x00	; 0
    2574:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
		priwriteHalfPort((u8_copy_command)>>shift_bit);
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	82 95       	swap	r24
    257c:	8f 70       	andi	r24, 0x0F	; 15
    257e:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <priwriteHalfPort>
		Enable();
    2582:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <Enable>
		priwriteHalfPort((u8_copy_command));
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <priwriteHalfPort>
		Enable();
    258c:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <Enable>
	}
#endif
}
    2590:	0f 90       	pop	r0
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <LCD_SendData>:

void LCD_SendData(u8 u8_copy_data){
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	0f 92       	push	r0
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	89 83       	std	Y+1, r24	; 0x01

	}
#elif(LCD_Mode==four_mode)
	{
		//SET RS PIN AS DATA
		Dio_WriteChannel(LCD_RS,HIGH);
    25a4:	83 e0       	ldi	r24, 0x03	; 3
    25a6:	61 e0       	ldi	r22, 0x01	; 1
    25a8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
		priwriteHalfPort((u8_copy_data)>>shift_bit);
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	82 95       	swap	r24
    25b0:	8f 70       	andi	r24, 0x0F	; 15
    25b2:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <priwriteHalfPort>
		Enable();
    25b6:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <Enable>
		priwriteHalfPort((u8_copy_data));
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <priwriteHalfPort>
		Enable();
    25c0:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <Enable>

	}
#endif
}
    25c4:	0f 90       	pop	r0
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <LCD_SEND_STRING>:
void LCD_SEND_STRING(const char *value){
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <LCD_SEND_STRING+0x6>
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <LCD_SEND_STRING+0x8>
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	9c 83       	std	Y+4, r25	; 0x04
    25da:	8b 83       	std	Y+3, r24	; 0x03
int i=0;
    25dc:	1a 82       	std	Y+2, r1	; 0x02
    25de:	19 82       	std	Y+1, r1	; 0x01
    25e0:	0f c0       	rjmp	.+30     	; 0x2600 <LCD_SEND_STRING+0x34>
	while (value[i]!='\0')
	{
		LCD_SendData(value[i]);
    25e2:	29 81       	ldd	r18, Y+1	; 0x01
    25e4:	3a 81       	ldd	r19, Y+2	; 0x02
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ea:	fc 01       	movw	r30, r24
    25ec:	e2 0f       	add	r30, r18
    25ee:	f3 1f       	adc	r31, r19
    25f0:	80 81       	ld	r24, Z
    25f2:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_SendData>
		i++;
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	9a 81       	ldd	r25, Y+2	; 0x02
    25fa:	01 96       	adiw	r24, 0x01	; 1
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
	}
#endif
}
void LCD_SEND_STRING(const char *value){
int i=0;
	while (value[i]!='\0')
    2600:	29 81       	ldd	r18, Y+1	; 0x01
    2602:	3a 81       	ldd	r19, Y+2	; 0x02
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	9c 81       	ldd	r25, Y+4	; 0x04
    2608:	fc 01       	movw	r30, r24
    260a:	e2 0f       	add	r30, r18
    260c:	f3 1f       	adc	r31, r19
    260e:	80 81       	ld	r24, Z
    2610:	88 23       	and	r24, r24
    2612:	39 f7       	brne	.-50     	; 0x25e2 <LCD_SEND_STRING+0x16>
	{
		LCD_SendData(value[i]);
		i++;
	}
}
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	08 95       	ret

00002622 <LCD_CLEAR>:

void LCD_CLEAR(void)
{
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	2e 97       	sbiw	r28, 0x0e	; 14
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand (0x01);		/* clear display */
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	0e 94 b2 12 	call	0x2564	; 0x2564 <LCD_SendCommand>
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	a0 e0       	ldi	r26, 0x00	; 0
    2642:	b0 e4       	ldi	r27, 0x40	; 64
    2644:	8b 87       	std	Y+11, r24	; 0x0b
    2646:	9c 87       	std	Y+12, r25	; 0x0c
    2648:	ad 87       	std	Y+13, r26	; 0x0d
    264a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264c:	6b 85       	ldd	r22, Y+11	; 0x0b
    264e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2650:	8d 85       	ldd	r24, Y+13	; 0x0d
    2652:	9e 85       	ldd	r25, Y+14	; 0x0e
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	4a ef       	ldi	r20, 0xFA	; 250
    265a:	54 e4       	ldi	r21, 0x44	; 68
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	8f 83       	std	Y+7, r24	; 0x07
    2666:	98 87       	std	Y+8, r25	; 0x08
    2668:	a9 87       	std	Y+9, r26	; 0x09
    266a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    266c:	6f 81       	ldd	r22, Y+7	; 0x07
    266e:	78 85       	ldd	r23, Y+8	; 0x08
    2670:	89 85       	ldd	r24, Y+9	; 0x09
    2672:	9a 85       	ldd	r25, Y+10	; 0x0a
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e8       	ldi	r20, 0x80	; 128
    267a:	5f e3       	ldi	r21, 0x3F	; 63
    267c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2680:	88 23       	and	r24, r24
    2682:	2c f4       	brge	.+10     	; 0x268e <LCD_CLEAR+0x6c>
		__ticks = 1;
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	9e 83       	std	Y+6, r25	; 0x06
    268a:	8d 83       	std	Y+5, r24	; 0x05
    268c:	3f c0       	rjmp	.+126    	; 0x270c <LCD_CLEAR+0xea>
	else if (__tmp > 65535)
    268e:	6f 81       	ldd	r22, Y+7	; 0x07
    2690:	78 85       	ldd	r23, Y+8	; 0x08
    2692:	89 85       	ldd	r24, Y+9	; 0x09
    2694:	9a 85       	ldd	r25, Y+10	; 0x0a
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	3f ef       	ldi	r19, 0xFF	; 255
    269a:	4f e7       	ldi	r20, 0x7F	; 127
    269c:	57 e4       	ldi	r21, 0x47	; 71
    269e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a2:	18 16       	cp	r1, r24
    26a4:	4c f5       	brge	.+82     	; 0x26f8 <LCD_CLEAR+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e2       	ldi	r20, 0x20	; 32
    26b4:	51 e4       	ldi	r21, 0x41	; 65
    26b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	bc 01       	movw	r22, r24
    26c0:	cd 01       	movw	r24, r26
    26c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	9e 83       	std	Y+6, r25	; 0x06
    26cc:	8d 83       	std	Y+5, r24	; 0x05
    26ce:	0f c0       	rjmp	.+30     	; 0x26ee <LCD_CLEAR+0xcc>
    26d0:	88 ec       	ldi	r24, 0xC8	; 200
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	9c 83       	std	Y+4, r25	; 0x04
    26d6:	8b 83       	std	Y+3, r24	; 0x03
    26d8:	8b 81       	ldd	r24, Y+3	; 0x03
    26da:	9c 81       	ldd	r25, Y+4	; 0x04
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_CLEAR+0xba>
    26e0:	9c 83       	std	Y+4, r25	; 0x04
    26e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e4:	8d 81       	ldd	r24, Y+5	; 0x05
    26e6:	9e 81       	ldd	r25, Y+6	; 0x06
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	9e 83       	std	Y+6, r25	; 0x06
    26ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ee:	8d 81       	ldd	r24, Y+5	; 0x05
    26f0:	9e 81       	ldd	r25, Y+6	; 0x06
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	69 f7       	brne	.-38     	; 0x26d0 <LCD_CLEAR+0xae>
    26f6:	14 c0       	rjmp	.+40     	; 0x2720 <LCD_CLEAR+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f8:	6f 81       	ldd	r22, Y+7	; 0x07
    26fa:	78 85       	ldd	r23, Y+8	; 0x08
    26fc:	89 85       	ldd	r24, Y+9	; 0x09
    26fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	9e 83       	std	Y+6, r25	; 0x06
    270a:	8d 83       	std	Y+5, r24	; 0x05
    270c:	8d 81       	ldd	r24, Y+5	; 0x05
    270e:	9e 81       	ldd	r25, Y+6	; 0x06
    2710:	9a 83       	std	Y+2, r25	; 0x02
    2712:	89 83       	std	Y+1, r24	; 0x01
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	9a 81       	ldd	r25, Y+2	; 0x02
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <LCD_CLEAR+0xf6>
    271c:	9a 83       	std	Y+2, r25	; 0x02
    271e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_SendCommand (0x80);		/* cursor at home position */
    2720:	80 e8       	ldi	r24, 0x80	; 128
    2722:	0e 94 b2 12 	call	0x2564	; 0x2564 <LCD_SendCommand>
}
    2726:	2e 96       	adiw	r28, 0x0e	; 14
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <LCD_Gotoxy>:

void LCD_Gotoxy(u8 X,u8 Y){
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	00 d0       	rcall	.+0      	; 0x273e <LCD_Gotoxy+0x6>
    273e:	0f 92       	push	r0
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	8a 83       	std	Y+2, r24	; 0x02
    2746:	6b 83       	std	Y+3, r22	; 0x03
	/*Check valid range*/
	if (Y < 20 && X < 4) {
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	84 31       	cpi	r24, 0x14	; 20
    274c:	88 f4       	brcc	.+34     	; 0x2770 <LCD_Gotoxy+0x38>
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	84 30       	cpi	r24, 0x04	; 4
    2752:	70 f4       	brcc	.+28     	; 0x2770 <LCD_Gotoxy+0x38>
	        unsigned char address = lineAddresses[X] + Y;
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	88 2f       	mov	r24, r24
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	fc 01       	movw	r30, r24
    275c:	ee 5e       	subi	r30, 0xEE	; 238
    275e:	fe 4f       	sbci	r31, 0xFE	; 254
    2760:	90 81       	ld	r25, Z
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	89 0f       	add	r24, r25
    2766:	89 83       	std	Y+1, r24	; 0x01
	        /*Set DDRAM address command*/
	        LCD_SendCommand(0x80 | address);
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	80 68       	ori	r24, 0x80	; 128
    276c:	0e 94 b2 12 	call	0x2564	; 0x2564 <LCD_SendCommand>
	    }
}
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	cf 91       	pop	r28
    2778:	df 91       	pop	r29
    277a:	08 95       	ret

0000277c <LCD_SendNumber>:

void LCD_SendNumber(u8 num){
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	00 d0       	rcall	.+0      	; 0x2782 <LCD_SendNumber+0x6>
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	8a 83       	std	Y+2, r24	; 0x02

	u8 data =num+'0';
    2788:	8a 81       	ldd	r24, Y+2	; 0x02
    278a:	80 5d       	subi	r24, 0xD0	; 208
    278c:	89 83       	std	Y+1, r24	; 0x01
	LCD_SendData(data);
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_SendData>
}
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <KeyPad_Init>:
 *      Author: shim
 */
#include "KeyPad.h"
#include <util/delay.h>

void KeyPad_Init(void){
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
DIO_setPinDirection(KeyPad_R1,DIO_OUTPUT);
    27a6:	85 e1       	ldi	r24, 0x15	; 21
    27a8:	61 e0       	ldi	r22, 0x01	; 1
    27aa:	0e 94 25 0c 	call	0x184a	; 0x184a <DIO_setPinDirection>
DIO_setPinDirection(KeyPad_R2,DIO_OUTPUT);
    27ae:	84 e1       	ldi	r24, 0x14	; 20
    27b0:	61 e0       	ldi	r22, 0x01	; 1
    27b2:	0e 94 25 0c 	call	0x184a	; 0x184a <DIO_setPinDirection>
DIO_setPinDirection(KeyPad_R3,DIO_OUTPUT);
    27b6:	83 e1       	ldi	r24, 0x13	; 19
    27b8:	61 e0       	ldi	r22, 0x01	; 1
    27ba:	0e 94 25 0c 	call	0x184a	; 0x184a <DIO_setPinDirection>
DIO_setPinDirection(KeyPad_R4,DIO_OUTPUT);
    27be:	82 e1       	ldi	r24, 0x12	; 18
    27c0:	61 e0       	ldi	r22, 0x01	; 1
    27c2:	0e 94 25 0c 	call	0x184a	; 0x184a <DIO_setPinDirection>

Dio_WriteChannel(KeyPad_R1, HIGH);
    27c6:	85 e1       	ldi	r24, 0x15	; 21
    27c8:	61 e0       	ldi	r22, 0x01	; 1
    27ca:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
	    Dio_WriteChannel(KeyPad_R2, HIGH);
    27ce:	84 e1       	ldi	r24, 0x14	; 20
    27d0:	61 e0       	ldi	r22, 0x01	; 1
    27d2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
	    Dio_WriteChannel(KeyPad_R3, HIGH);
    27d6:	83 e1       	ldi	r24, 0x13	; 19
    27d8:	61 e0       	ldi	r22, 0x01	; 1
    27da:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
	    Dio_WriteChannel(KeyPad_R4, HIGH);
    27de:	82 e1       	ldi	r24, 0x12	; 18
    27e0:	61 e0       	ldi	r22, 0x01	; 1
    27e2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>

DIO_setPinDirection(KeyPad_C1,DIO_INPUT);
    27e6:	8f e1       	ldi	r24, 0x1F	; 31
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	0e 94 25 0c 	call	0x184a	; 0x184a <DIO_setPinDirection>
DIO_setPinDirection(KeyPad_C2,DIO_INPUT);
    27ee:	8e e1       	ldi	r24, 0x1E	; 30
    27f0:	60 e0       	ldi	r22, 0x00	; 0
    27f2:	0e 94 25 0c 	call	0x184a	; 0x184a <DIO_setPinDirection>
DIO_setPinDirection(KeyPad_C3,DIO_INPUT);
    27f6:	8d e1       	ldi	r24, 0x1D	; 29
    27f8:	60 e0       	ldi	r22, 0x00	; 0
    27fa:	0e 94 25 0c 	call	0x184a	; 0x184a <DIO_setPinDirection>
DIO_setPinDirection(KeyPad_C4,DIO_INPUT);
    27fe:	8b e1       	ldi	r24, 0x1B	; 27
    2800:	60 e0       	ldi	r22, 0x00	; 0
    2802:	0e 94 25 0c 	call	0x184a	; 0x184a <DIO_setPinDirection>

DIO_PULL_RES(KeyPad_C1,PULL_UP);
    2806:	8f e1       	ldi	r24, 0x1F	; 31
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_PULL_RES>
	DIO_PULL_RES(KeyPad_C2,PULL_UP);
    280e:	8e e1       	ldi	r24, 0x1E	; 30
    2810:	60 e0       	ldi	r22, 0x00	; 0
    2812:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_PULL_RES>
	DIO_PULL_RES(KeyPad_C3,PULL_UP);
    2816:	8d e1       	ldi	r24, 0x1D	; 29
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_PULL_RES>
	DIO_PULL_RES(KeyPad_C4,PULL_UP);
    281e:	8b e1       	ldi	r24, 0x1B	; 27
    2820:	60 e0       	ldi	r22, 0x00	; 0
    2822:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_PULL_RES>
}
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <KeyPad_press>:

u8 KeyPad_press(void)
{
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	a7 97       	sbiw	r28, 0x27	; 39
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	de bf       	out	0x3e, r29	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	cd bf       	out	0x3d, r28	; 61
/*Parameters needed*/
  static u8 Rows[4]={KeyPad_R1,KeyPad_R2,KeyPad_R3, KeyPad_R4 };
  static u8 columns[4]={KeyPad_C1,KeyPad_C2,KeyPad_C3,KeyPad_C4};
  u8 KPD_SwitchVal[last_ROW][last_column]=KEYS;
    2840:	ce 01       	movw	r24, r28
    2842:	43 96       	adiw	r24, 0x13	; 19
    2844:	9c a3       	std	Y+36, r25	; 0x24
    2846:	8b a3       	std	Y+35, r24	; 0x23
    2848:	e6 e1       	ldi	r30, 0x16	; 22
    284a:	f1 e0       	ldi	r31, 0x01	; 1
    284c:	fe a3       	std	Y+38, r31	; 0x26
    284e:	ed a3       	std	Y+37, r30	; 0x25
    2850:	f0 e1       	ldi	r31, 0x10	; 16
    2852:	ff a3       	std	Y+39, r31	; 0x27
    2854:	ed a1       	ldd	r30, Y+37	; 0x25
    2856:	fe a1       	ldd	r31, Y+38	; 0x26
    2858:	00 80       	ld	r0, Z
    285a:	8d a1       	ldd	r24, Y+37	; 0x25
    285c:	9e a1       	ldd	r25, Y+38	; 0x26
    285e:	01 96       	adiw	r24, 0x01	; 1
    2860:	9e a3       	std	Y+38, r25	; 0x26
    2862:	8d a3       	std	Y+37, r24	; 0x25
    2864:	eb a1       	ldd	r30, Y+35	; 0x23
    2866:	fc a1       	ldd	r31, Y+36	; 0x24
    2868:	00 82       	st	Z, r0
    286a:	8b a1       	ldd	r24, Y+35	; 0x23
    286c:	9c a1       	ldd	r25, Y+36	; 0x24
    286e:	01 96       	adiw	r24, 0x01	; 1
    2870:	9c a3       	std	Y+36, r25	; 0x24
    2872:	8b a3       	std	Y+35, r24	; 0x23
    2874:	9f a1       	ldd	r25, Y+39	; 0x27
    2876:	91 50       	subi	r25, 0x01	; 1
    2878:	9f a3       	std	Y+39, r25	; 0x27
    287a:	ef a1       	ldd	r30, Y+39	; 0x27
    287c:	ee 23       	and	r30, r30
    287e:	51 f7       	brne	.-44     	; 0x2854 <KeyPad_press+0x28>
  u8 LOC_Column;
  u8 LOC_Row;
  u8 END_FLAG = 0 ;
    2880:	18 8a       	std	Y+16, r1	; 0x10

 /* Initialize the switch status to NOT Pressed                                                                */
  u8 LOC_Retrun = NOT_PRESSED_Key;
    2882:	8f ef       	ldi	r24, 0xFF	; 255
    2884:	8f 87       	std	Y+15, r24	; 0x0f

  /* Looping on Rows of the Key Pad*/

   for (LOC_Row = First_ROW; LOC_Row < last_ROW; LOC_Row++)
    2886:	19 8a       	std	Y+17, r1	; 0x11
    2888:	c3 c0       	rjmp	.+390    	; 0x2a10 <KeyPad_press+0x1e4>
//	    Dio_WriteChannel(Rows[KeyPad_R2], HIGH);
//	    Dio_WriteChannel(Rows[KeyPad_R3], HIGH);
//	    Dio_WriteChannel(Rows[KeyPad_R4], HIGH);

    /* Activate the Row */
	 Dio_WriteChannel(Rows[LOC_Row], LOW);
    288a:	89 89       	ldd	r24, Y+17	; 0x11
    288c:	88 2f       	mov	r24, r24
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	fc 01       	movw	r30, r24
    2892:	e2 5f       	subi	r30, 0xF2	; 242
    2894:	fe 4f       	sbci	r31, 0xFE	; 254
    2896:	80 81       	ld	r24, Z
    2898:	60 e0       	ldi	r22, 0x00	; 0
    289a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>

    /* Loop on the rows of the Key Pad                                                                               */
	 for (LOC_Column = First_column; LOC_Column < last_column; LOC_Column++)
    289e:	1a 8a       	std	Y+18, r1	; 0x12
    28a0:	a3 c0       	rjmp	.+326    	; 0x29e8 <KeyPad_press+0x1bc>
	   {
      /* Check the status of the switch                                                                              */
      if (0==Dio_ReadChannel(columns[LOC_Column]))
    28a2:	8a 89       	ldd	r24, Y+18	; 0x12
    28a4:	88 2f       	mov	r24, r24
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	fc 01       	movw	r30, r24
    28aa:	e6 5f       	subi	r30, 0xF6	; 246
    28ac:	fe 4f       	sbci	r31, 0xFE	; 254
    28ae:	80 81       	ld	r24, Z
    28b0:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_ReadChannel>
    28b4:	88 23       	and	r24, r24
    28b6:	09 f0       	breq	.+2      	; 0x28ba <KeyPad_press+0x8e>
    28b8:	94 c0       	rjmp	.+296    	; 0x29e2 <KeyPad_press+0x1b6>
      {
        /* Get the value of the currently pressed switch                                                             */
        LOC_Retrun = KPD_SwitchVal[LOC_Row - First_ROW][LOC_Column - First_column];
    28ba:	89 89       	ldd	r24, Y+17	; 0x11
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	8a 89       	ldd	r24, Y+18	; 0x12
    28c2:	48 2f       	mov	r20, r24
    28c4:	50 e0       	ldi	r21, 0x00	; 0
    28c6:	22 0f       	add	r18, r18
    28c8:	33 1f       	adc	r19, r19
    28ca:	22 0f       	add	r18, r18
    28cc:	33 1f       	adc	r19, r19
    28ce:	ce 01       	movw	r24, r28
    28d0:	01 96       	adiw	r24, 0x01	; 1
    28d2:	82 0f       	add	r24, r18
    28d4:	93 1f       	adc	r25, r19
    28d6:	84 0f       	add	r24, r20
    28d8:	95 1f       	adc	r25, r21
    28da:	fc 01       	movw	r30, r24
    28dc:	72 96       	adiw	r30, 0x12	; 18
    28de:	80 81       	ld	r24, Z
    28e0:	8f 87       	std	Y+15, r24	; 0x0f

        /* Wait until the switch is released (Single Press)                                                          */
        while (0==Dio_ReadChannel(columns[LOC_Column]));
    28e2:	8a 89       	ldd	r24, Y+18	; 0x12
    28e4:	88 2f       	mov	r24, r24
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	fc 01       	movw	r30, r24
    28ea:	e6 5f       	subi	r30, 0xF6	; 246
    28ec:	fe 4f       	sbci	r31, 0xFE	; 254
    28ee:	80 81       	ld	r24, Z
    28f0:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Dio_ReadChannel>
    28f4:	88 23       	and	r24, r24
    28f6:	a9 f3       	breq	.-22     	; 0x28e2 <KeyPad_press+0xb6>
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	a0 e2       	ldi	r26, 0x20	; 32
    28fe:	b1 e4       	ldi	r27, 0x41	; 65
    2900:	8b 87       	std	Y+11, r24	; 0x0b
    2902:	9c 87       	std	Y+12, r25	; 0x0c
    2904:	ad 87       	std	Y+13, r26	; 0x0d
    2906:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2908:	6b 85       	ldd	r22, Y+11	; 0x0b
    290a:	7c 85       	ldd	r23, Y+12	; 0x0c
    290c:	8d 85       	ldd	r24, Y+13	; 0x0d
    290e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	4a ef       	ldi	r20, 0xFA	; 250
    2916:	54 e4       	ldi	r21, 0x44	; 68
    2918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	8f 83       	std	Y+7, r24	; 0x07
    2922:	98 87       	std	Y+8, r25	; 0x08
    2924:	a9 87       	std	Y+9, r26	; 0x09
    2926:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2928:	6f 81       	ldd	r22, Y+7	; 0x07
    292a:	78 85       	ldd	r23, Y+8	; 0x08
    292c:	89 85       	ldd	r24, Y+9	; 0x09
    292e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e8       	ldi	r20, 0x80	; 128
    2936:	5f e3       	ldi	r21, 0x3F	; 63
    2938:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    293c:	88 23       	and	r24, r24
    293e:	2c f4       	brge	.+10     	; 0x294a <KeyPad_press+0x11e>
		__ticks = 1;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	9e 83       	std	Y+6, r25	; 0x06
    2946:	8d 83       	std	Y+5, r24	; 0x05
    2948:	3f c0       	rjmp	.+126    	; 0x29c8 <KeyPad_press+0x19c>
	else if (__tmp > 65535)
    294a:	6f 81       	ldd	r22, Y+7	; 0x07
    294c:	78 85       	ldd	r23, Y+8	; 0x08
    294e:	89 85       	ldd	r24, Y+9	; 0x09
    2950:	9a 85       	ldd	r25, Y+10	; 0x0a
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	3f ef       	ldi	r19, 0xFF	; 255
    2956:	4f e7       	ldi	r20, 0x7F	; 127
    2958:	57 e4       	ldi	r21, 0x47	; 71
    295a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    295e:	18 16       	cp	r1, r24
    2960:	4c f5       	brge	.+82     	; 0x29b4 <KeyPad_press+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2962:	6b 85       	ldd	r22, Y+11	; 0x0b
    2964:	7c 85       	ldd	r23, Y+12	; 0x0c
    2966:	8d 85       	ldd	r24, Y+13	; 0x0d
    2968:	9e 85       	ldd	r25, Y+14	; 0x0e
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e2       	ldi	r20, 0x20	; 32
    2970:	51 e4       	ldi	r21, 0x41	; 65
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	9e 83       	std	Y+6, r25	; 0x06
    2988:	8d 83       	std	Y+5, r24	; 0x05
    298a:	0f c0       	rjmp	.+30     	; 0x29aa <KeyPad_press+0x17e>
    298c:	88 ec       	ldi	r24, 0xC8	; 200
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	9c 83       	std	Y+4, r25	; 0x04
    2992:	8b 83       	std	Y+3, r24	; 0x03
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	9c 81       	ldd	r25, Y+4	; 0x04
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <KeyPad_press+0x16c>
    299c:	9c 83       	std	Y+4, r25	; 0x04
    299e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a0:	8d 81       	ldd	r24, Y+5	; 0x05
    29a2:	9e 81       	ldd	r25, Y+6	; 0x06
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	9e 83       	std	Y+6, r25	; 0x06
    29a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29aa:	8d 81       	ldd	r24, Y+5	; 0x05
    29ac:	9e 81       	ldd	r25, Y+6	; 0x06
    29ae:	00 97       	sbiw	r24, 0x00	; 0
    29b0:	69 f7       	brne	.-38     	; 0x298c <KeyPad_press+0x160>
    29b2:	14 c0       	rjmp	.+40     	; 0x29dc <KeyPad_press+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b4:	6f 81       	ldd	r22, Y+7	; 0x07
    29b6:	78 85       	ldd	r23, Y+8	; 0x08
    29b8:	89 85       	ldd	r24, Y+9	; 0x09
    29ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	9e 83       	std	Y+6, r25	; 0x06
    29c6:	8d 83       	std	Y+5, r24	; 0x05
    29c8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ca:	9e 81       	ldd	r25, Y+6	; 0x06
    29cc:	9a 83       	std	Y+2, r25	; 0x02
    29ce:	89 83       	std	Y+1, r24	; 0x01
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	9a 81       	ldd	r25, Y+2	; 0x02
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <KeyPad_press+0x1a8>
    29d8:	9a 83       	std	Y+2, r25	; 0x02
    29da:	89 83       	std	Y+1, r24	; 0x01
        /* Delay to avoid bouncing */
        _delay_ms(10);
        END_FLAG = 1 ;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	88 8b       	std	Y+16, r24	; 0x10
    29e0:	07 c0       	rjmp	.+14     	; 0x29f0 <KeyPad_press+0x1c4>

    /* Activate the Row */
	 Dio_WriteChannel(Rows[LOC_Row], LOW);

    /* Loop on the rows of the Key Pad                                                                               */
	 for (LOC_Column = First_column; LOC_Column < last_column; LOC_Column++)
    29e2:	8a 89       	ldd	r24, Y+18	; 0x12
    29e4:	8f 5f       	subi	r24, 0xFF	; 255
    29e6:	8a 8b       	std	Y+18, r24	; 0x12
    29e8:	8a 89       	ldd	r24, Y+18	; 0x12
    29ea:	84 30       	cpi	r24, 0x04	; 4
    29ec:	08 f4       	brcc	.+2      	; 0x29f0 <KeyPad_press+0x1c4>
    29ee:	59 cf       	rjmp	.-334    	; 0x28a2 <KeyPad_press+0x76>
        break;
      }
    }


	 Dio_WriteChannel(Rows[LOC_Row], HIGH);
    29f0:	89 89       	ldd	r24, Y+17	; 0x11
    29f2:	88 2f       	mov	r24, r24
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	fc 01       	movw	r30, r24
    29f8:	e2 5f       	subi	r30, 0xF2	; 242
    29fa:	fe 4f       	sbci	r31, 0xFE	; 254
    29fc:	80 81       	ld	r24, Z
    29fe:	61 e0       	ldi	r22, 0x01	; 1
    2a00:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
	 if(END_FLAG == 1)
    2a04:	88 89       	ldd	r24, Y+16	; 0x10
    2a06:	81 30       	cpi	r24, 0x01	; 1
    2a08:	39 f0       	breq	.+14     	; 0x2a18 <KeyPad_press+0x1ec>
 /* Initialize the switch status to NOT Pressed                                                                */
  u8 LOC_Retrun = NOT_PRESSED_Key;

  /* Looping on Rows of the Key Pad*/

   for (LOC_Row = First_ROW; LOC_Row < last_ROW; LOC_Row++)
    2a0a:	89 89       	ldd	r24, Y+17	; 0x11
    2a0c:	8f 5f       	subi	r24, 0xFF	; 255
    2a0e:	89 8b       	std	Y+17, r24	; 0x11
    2a10:	89 89       	ldd	r24, Y+17	; 0x11
    2a12:	84 30       	cpi	r24, 0x04	; 4
    2a14:	08 f4       	brcc	.+2      	; 0x2a18 <KeyPad_press+0x1ec>
    2a16:	39 cf       	rjmp	.-398    	; 0x288a <KeyPad_press+0x5e>
	 {
		 break;
	 }
  }

  return LOC_Retrun;
    2a18:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2a1a:	a7 96       	adiw	r28, 0x27	; 39
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	08 95       	ret

00002a2c <main>:
void traffic_light(void);
u32 count=0;
	u8 remin;


int main(){
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
	Dio_Init();
    2a34:	0e 94 ca 08 	call	0x1194	; 0x1194 <Dio_Init>
    LCD_Init();
    2a38:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <LCD_Init>
    TIM0_init();
    2a3c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TIM0_init>
    LCD_Gotoxy(0,5);
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	65 e0       	ldi	r22, 0x05	; 5
    2a44:	0e 94 9c 13 	call	0x2738	; 0x2738 <LCD_Gotoxy>
    LCD_SEND_STRING("Traffic Light ");
    2a48:	80 e6       	ldi	r24, 0x60	; 96
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <LCD_SEND_STRING>
    LCD_Gotoxy(1,4);
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	64 e0       	ldi	r22, 0x04	; 4
    2a54:	0e 94 9c 13 	call	0x2738	; 0x2738 <LCD_Gotoxy>
    LCD_SEND_STRING("Reaming time:");
    2a58:	8f e6       	ldi	r24, 0x6F	; 111
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <LCD_SEND_STRING>
    LCD_Gotoxy(2,9);
    2a60:	82 e0       	ldi	r24, 0x02	; 2
    2a62:	69 e0       	ldi	r22, 0x09	; 9
    2a64:	0e 94 9c 13 	call	0x2738	; 0x2738 <LCD_Gotoxy>
    LCD_SEND_STRING(" Sec");
    2a68:	8d e7       	ldi	r24, 0x7D	; 125
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <LCD_SEND_STRING>
	TIMO_set_callback_COM(&traffic_light);
    2a70:	8f e3       	ldi	r24, 0x3F	; 63
    2a72:	95 e1       	ldi	r25, 0x15	; 21
    2a74:	0e 94 fd 06 	call	0xdfa	; 0xdfa <TIMO_set_callback_COM>
    TIMO_INTRRUPT_Enable();
    2a78:	0e 94 8d 06 	call	0xd1a	; 0xd1a <TIMO_INTRRUPT_Enable>
    2a7c:	ff cf       	rjmp	.-2      	; 0x2a7c <main+0x50>

00002a7e <traffic_light>:

	}

}

void traffic_light(void){
    2a7e:	df 93       	push	r29
    2a80:	cf 93       	push	r28
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
	if(count==0){
    2a86:	80 91 2e 01 	lds	r24, 0x012E
    2a8a:	90 91 2f 01 	lds	r25, 0x012F
    2a8e:	a0 91 30 01 	lds	r26, 0x0130
    2a92:	b0 91 31 01 	lds	r27, 0x0131
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	a1 05       	cpc	r26, r1
    2a9a:	b1 05       	cpc	r27, r1
    2a9c:	41 f4       	brne	.+16     	; 0x2aae <traffic_light+0x30>
		remin=9;
    2a9e:	89 e0       	ldi	r24, 0x09	; 9
    2aa0:	80 93 32 01 	sts	0x0132, r24
	Dio_WriteChannel(PIND_0,HIGH);
    2aa4:	88 e1       	ldi	r24, 0x18	; 24
    2aa6:	61 e0       	ldi	r22, 0x01	; 1
    2aa8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
    2aac:	5b c0       	rjmp	.+182    	; 0x2b64 <traffic_light+0xe6>

		}
	else if(count==1000){
    2aae:	80 91 2e 01 	lds	r24, 0x012E
    2ab2:	90 91 2f 01 	lds	r25, 0x012F
    2ab6:	a0 91 30 01 	lds	r26, 0x0130
    2aba:	b0 91 31 01 	lds	r27, 0x0131
    2abe:	88 3e       	cpi	r24, 0xE8	; 232
    2ac0:	23 e0       	ldi	r18, 0x03	; 3
    2ac2:	92 07       	cpc	r25, r18
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	a2 07       	cpc	r26, r18
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	b2 07       	cpc	r27, r18
    2acc:	61 f4       	brne	.+24     	; 0x2ae6 <traffic_light+0x68>
		remin=4;
    2ace:	84 e0       	ldi	r24, 0x04	; 4
    2ad0:	80 93 32 01 	sts	0x0132, r24
		Dio_WriteChannel(PIND_0,LOW);
    2ad4:	88 e1       	ldi	r24, 0x18	; 24
    2ad6:	60 e0       	ldi	r22, 0x00	; 0
    2ad8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
		Dio_WriteChannel(PIND_1,HIGH);
    2adc:	89 e1       	ldi	r24, 0x19	; 25
    2ade:	61 e0       	ldi	r22, 0x01	; 1
    2ae0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
    2ae4:	3f c0       	rjmp	.+126    	; 0x2b64 <traffic_light+0xe6>

			}
	else if(count==1500){
    2ae6:	80 91 2e 01 	lds	r24, 0x012E
    2aea:	90 91 2f 01 	lds	r25, 0x012F
    2aee:	a0 91 30 01 	lds	r26, 0x0130
    2af2:	b0 91 31 01 	lds	r27, 0x0131
    2af6:	8c 3d       	cpi	r24, 0xDC	; 220
    2af8:	25 e0       	ldi	r18, 0x05	; 5
    2afa:	92 07       	cpc	r25, r18
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	a2 07       	cpc	r26, r18
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	b2 07       	cpc	r27, r18
    2b04:	61 f4       	brne	.+24     	; 0x2b1e <traffic_light+0xa0>
		remin=6;
    2b06:	86 e0       	ldi	r24, 0x06	; 6
    2b08:	80 93 32 01 	sts	0x0132, r24
		Dio_WriteChannel(PIND_1,LOW);
    2b0c:	89 e1       	ldi	r24, 0x19	; 25
    2b0e:	60 e0       	ldi	r22, 0x00	; 0
    2b10:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
		Dio_WriteChannel(PIND_2,HIGH);
    2b14:	8a e1       	ldi	r24, 0x1A	; 26
    2b16:	61 e0       	ldi	r22, 0x01	; 1
    2b18:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
    2b1c:	23 c0       	rjmp	.+70     	; 0x2b64 <traffic_light+0xe6>

			}
	else if(count==2200){
    2b1e:	80 91 2e 01 	lds	r24, 0x012E
    2b22:	90 91 2f 01 	lds	r25, 0x012F
    2b26:	a0 91 30 01 	lds	r26, 0x0130
    2b2a:	b0 91 31 01 	lds	r27, 0x0131
    2b2e:	88 39       	cpi	r24, 0x98	; 152
    2b30:	28 e0       	ldi	r18, 0x08	; 8
    2b32:	92 07       	cpc	r25, r18
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	a2 07       	cpc	r26, r18
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	b2 07       	cpc	r27, r18
    2b3c:	99 f4       	brne	.+38     	; 0x2b64 <traffic_light+0xe6>
		remin=9;
    2b3e:	89 e0       	ldi	r24, 0x09	; 9
    2b40:	80 93 32 01 	sts	0x0132, r24
		Dio_WriteChannel(PIND_2,LOW);
    2b44:	8a e1       	ldi	r24, 0x1A	; 26
    2b46:	60 e0       	ldi	r22, 0x00	; 0
    2b48:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
		Dio_WriteChannel(PIND_0,HIGH);
    2b4c:	88 e1       	ldi	r24, 0x18	; 24
    2b4e:	61 e0       	ldi	r22, 0x01	; 1
    2b50:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Dio_WriteChannel>
		count=0;
    2b54:	10 92 2e 01 	sts	0x012E, r1
    2b58:	10 92 2f 01 	sts	0x012F, r1
    2b5c:	10 92 30 01 	sts	0x0130, r1
    2b60:	10 92 31 01 	sts	0x0131, r1
			}
	else{

	}
	if(count%100==0)
    2b64:	80 91 2e 01 	lds	r24, 0x012E
    2b68:	90 91 2f 01 	lds	r25, 0x012F
    2b6c:	a0 91 30 01 	lds	r26, 0x0130
    2b70:	b0 91 31 01 	lds	r27, 0x0131
    2b74:	24 e6       	ldi	r18, 0x64	; 100
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	40 e0       	ldi	r20, 0x00	; 0
    2b7a:	50 e0       	ldi	r21, 0x00	; 0
    2b7c:	bc 01       	movw	r22, r24
    2b7e:	cd 01       	movw	r24, r26
    2b80:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__udivmodsi4>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	a1 05       	cpc	r26, r1
    2b8c:	b1 05       	cpc	r27, r1
    2b8e:	69 f4       	brne	.+26     	; 0x2baa <traffic_light+0x12c>
	{
        LCD_Gotoxy(2,8);
    2b90:	82 e0       	ldi	r24, 0x02	; 2
    2b92:	68 e0       	ldi	r22, 0x08	; 8
    2b94:	0e 94 9c 13 	call	0x2738	; 0x2738 <LCD_Gotoxy>
		LCD_SendNumber(remin);
    2b98:	80 91 32 01 	lds	r24, 0x0132
    2b9c:	0e 94 be 13 	call	0x277c	; 0x277c <LCD_SendNumber>
		remin--;
    2ba0:	80 91 32 01 	lds	r24, 0x0132
    2ba4:	81 50       	subi	r24, 0x01	; 1
    2ba6:	80 93 32 01 	sts	0x0132, r24
	}

   count++;
    2baa:	80 91 2e 01 	lds	r24, 0x012E
    2bae:	90 91 2f 01 	lds	r25, 0x012F
    2bb2:	a0 91 30 01 	lds	r26, 0x0130
    2bb6:	b0 91 31 01 	lds	r27, 0x0131
    2bba:	01 96       	adiw	r24, 0x01	; 1
    2bbc:	a1 1d       	adc	r26, r1
    2bbe:	b1 1d       	adc	r27, r1
    2bc0:	80 93 2e 01 	sts	0x012E, r24
    2bc4:	90 93 2f 01 	sts	0x012F, r25
    2bc8:	a0 93 30 01 	sts	0x0130, r26
    2bcc:	b0 93 31 01 	sts	0x0131, r27
}
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <__udivmodsi4>:
    2bd6:	a1 e2       	ldi	r26, 0x21	; 33
    2bd8:	1a 2e       	mov	r1, r26
    2bda:	aa 1b       	sub	r26, r26
    2bdc:	bb 1b       	sub	r27, r27
    2bde:	fd 01       	movw	r30, r26
    2be0:	0d c0       	rjmp	.+26     	; 0x2bfc <__udivmodsi4_ep>

00002be2 <__udivmodsi4_loop>:
    2be2:	aa 1f       	adc	r26, r26
    2be4:	bb 1f       	adc	r27, r27
    2be6:	ee 1f       	adc	r30, r30
    2be8:	ff 1f       	adc	r31, r31
    2bea:	a2 17       	cp	r26, r18
    2bec:	b3 07       	cpc	r27, r19
    2bee:	e4 07       	cpc	r30, r20
    2bf0:	f5 07       	cpc	r31, r21
    2bf2:	20 f0       	brcs	.+8      	; 0x2bfc <__udivmodsi4_ep>
    2bf4:	a2 1b       	sub	r26, r18
    2bf6:	b3 0b       	sbc	r27, r19
    2bf8:	e4 0b       	sbc	r30, r20
    2bfa:	f5 0b       	sbc	r31, r21

00002bfc <__udivmodsi4_ep>:
    2bfc:	66 1f       	adc	r22, r22
    2bfe:	77 1f       	adc	r23, r23
    2c00:	88 1f       	adc	r24, r24
    2c02:	99 1f       	adc	r25, r25
    2c04:	1a 94       	dec	r1
    2c06:	69 f7       	brne	.-38     	; 0x2be2 <__udivmodsi4_loop>
    2c08:	60 95       	com	r22
    2c0a:	70 95       	com	r23
    2c0c:	80 95       	com	r24
    2c0e:	90 95       	com	r25
    2c10:	9b 01       	movw	r18, r22
    2c12:	ac 01       	movw	r20, r24
    2c14:	bd 01       	movw	r22, r26
    2c16:	cf 01       	movw	r24, r30
    2c18:	08 95       	ret

00002c1a <__prologue_saves__>:
    2c1a:	2f 92       	push	r2
    2c1c:	3f 92       	push	r3
    2c1e:	4f 92       	push	r4
    2c20:	5f 92       	push	r5
    2c22:	6f 92       	push	r6
    2c24:	7f 92       	push	r7
    2c26:	8f 92       	push	r8
    2c28:	9f 92       	push	r9
    2c2a:	af 92       	push	r10
    2c2c:	bf 92       	push	r11
    2c2e:	cf 92       	push	r12
    2c30:	df 92       	push	r13
    2c32:	ef 92       	push	r14
    2c34:	ff 92       	push	r15
    2c36:	0f 93       	push	r16
    2c38:	1f 93       	push	r17
    2c3a:	cf 93       	push	r28
    2c3c:	df 93       	push	r29
    2c3e:	cd b7       	in	r28, 0x3d	; 61
    2c40:	de b7       	in	r29, 0x3e	; 62
    2c42:	ca 1b       	sub	r28, r26
    2c44:	db 0b       	sbc	r29, r27
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	09 94       	ijmp

00002c52 <__epilogue_restores__>:
    2c52:	2a 88       	ldd	r2, Y+18	; 0x12
    2c54:	39 88       	ldd	r3, Y+17	; 0x11
    2c56:	48 88       	ldd	r4, Y+16	; 0x10
    2c58:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c60:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c62:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c64:	b9 84       	ldd	r11, Y+9	; 0x09
    2c66:	c8 84       	ldd	r12, Y+8	; 0x08
    2c68:	df 80       	ldd	r13, Y+7	; 0x07
    2c6a:	ee 80       	ldd	r14, Y+6	; 0x06
    2c6c:	fd 80       	ldd	r15, Y+5	; 0x05
    2c6e:	0c 81       	ldd	r16, Y+4	; 0x04
    2c70:	1b 81       	ldd	r17, Y+3	; 0x03
    2c72:	aa 81       	ldd	r26, Y+2	; 0x02
    2c74:	b9 81       	ldd	r27, Y+1	; 0x01
    2c76:	ce 0f       	add	r28, r30
    2c78:	d1 1d       	adc	r29, r1
    2c7a:	0f b6       	in	r0, 0x3f	; 63
    2c7c:	f8 94       	cli
    2c7e:	de bf       	out	0x3e, r29	; 62
    2c80:	0f be       	out	0x3f, r0	; 63
    2c82:	cd bf       	out	0x3d, r28	; 61
    2c84:	ed 01       	movw	r28, r26
    2c86:	08 95       	ret

00002c88 <_exit>:
    2c88:	f8 94       	cli

00002c8a <__stop_program>:
    2c8a:	ff cf       	rjmp	.-2      	; 0x2c8a <__stop_program>
